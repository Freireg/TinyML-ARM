
TinyML-F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006f24  08006f24  00016f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f8c  08006f8c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006f8c  08006f8c  00016f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f94  08006f94  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f94  08006f94  00016f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f98  08006f98  00016f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08006f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001c2c  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d28  20001d28  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e530  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002922  00000000  00000000  0002e65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  00030f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a00  00000000  00000000  00031ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024fe3  00000000  00000000  000324b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eef4  00000000  00000000  0005749b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5eab  00000000  00000000  0006638f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012c23a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c64  00000000  00000000  0012c28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006f0c 	.word	0x08006f0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08006f0c 	.word	0x08006f0c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 f975 	bl	80007c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f811 	bl	80004fc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f883 	bl	80005e4 <_ZL12MX_GPIO_Initv>
  MX_USB_DEVICE_Init();
 80004de:	f005 ffcf 	bl	8006480 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  uint8_t buffer[] = "Hello World!";
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <main+0x2c>)
 80004e4:	463c      	mov	r4, r7
 80004e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004e8:	c407      	stmia	r4!, {r0, r1, r2}
 80004ea:	7023      	strb	r3, [r4, #0]
    /* USER CODE BEGIN 3 */
	  CDC_Transmit_FS(buffer, 12);
 80004ec:	463b      	mov	r3, r7
 80004ee:	210c      	movs	r1, #12
 80004f0:	4618      	mov	r0, r3
 80004f2:	f006 f883 	bl	80065fc <CDC_Transmit_FS>
  }
 80004f6:	e7f4      	b.n	80004e2 <main+0x16>
 80004f8:	08006f24 	.word	0x08006f24

080004fc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f006 fcf6 	bl	8006efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <_Z18SystemClock_Configv+0xe0>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	4a2c      	ldr	r2, [pc, #176]	; (80005dc <_Z18SystemClock_Configv+0xe0>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	; 0x40
 8000530:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <_Z18SystemClock_Configv+0xe0>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <_Z18SystemClock_Configv+0xe4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a26      	ldr	r2, [pc, #152]	; (80005e0 <_Z18SystemClock_Configv+0xe4>)
 8000546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <_Z18SystemClock_Configv+0xe4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000558:	2301      	movs	r3, #1
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800056c:	2304      	movs	r3, #4
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000570:	23a8      	movs	r3, #168	; 0xa8
 8000572:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000578:	2307      	movs	r3, #7
 800057a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057c:	f107 0320 	add.w	r3, r7, #32
 8000580:	4618      	mov	r0, r3
 8000582:	f001 fef7 	bl	8002374 <HAL_RCC_OscConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	bf14      	ite	ne
 800058c:	2301      	movne	r3, #1
 800058e:	2300      	moveq	r3, #0
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000596:	f000 f875 	bl	8000684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059e:	2302      	movs	r3, #2
 80005a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2105      	movs	r1, #5
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 f953 	bl	8002864 <HAL_RCC_ClockConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	bf14      	ite	ne
 80005c4:	2301      	movne	r3, #1
 80005c6:	2300      	moveq	r3, #0
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80005ce:	f000 f859 	bl	8000684 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3750      	adds	r7, #80	; 0x50
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <_ZL12MX_GPIO_Initv+0x98>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a1e      	ldr	r2, [pc, #120]	; (800067c <_ZL12MX_GPIO_Initv+0x98>)
 8000604:	f043 0310 	orr.w	r3, r3, #16
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <_ZL12MX_GPIO_Initv+0x98>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0310 	and.w	r3, r3, #16
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <_ZL12MX_GPIO_Initv+0x98>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <_ZL12MX_GPIO_Initv+0x98>)
 8000620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <_ZL12MX_GPIO_Initv+0x98>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <_ZL12MX_GPIO_Initv+0x98>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a10      	ldr	r2, [pc, #64]	; (800067c <_ZL12MX_GPIO_Initv+0x98>)
 800063c:	f043 0301 	orr.w	r3, r3, #1
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <_ZL12MX_GPIO_Initv+0x98>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	210c      	movs	r1, #12
 8000652:	480b      	ldr	r0, [pc, #44]	; (8000680 <_ZL12MX_GPIO_Initv+0x9c>)
 8000654:	f000 fbf8 	bl	8000e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000658:	230c      	movs	r3, #12
 800065a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <_ZL12MX_GPIO_Initv+0x9c>)
 8000670:	f000 fa4e 	bl	8000b10 <HAL_GPIO_Init>

}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40021000 	.word	0x40021000

08000684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068c:	e7fe      	b.n	800068c <Error_Handler+0x8>
	...

08000690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <HAL_MspInit+0x4c>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069e:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <HAL_MspInit+0x4c>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6453      	str	r3, [r2, #68]	; 0x44
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <HAL_MspInit+0x4c>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <HAL_MspInit+0x4c>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	4a08      	ldr	r2, [pc, #32]	; (80006dc <HAL_MspInit+0x4c>)
 80006bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c0:	6413      	str	r3, [r2, #64]	; 0x40
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_MspInit+0x4c>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <NMI_Handler+0x4>

080006e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler+0x4>

080006ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <MemManage_Handler+0x4>

080006f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <BusFault_Handler+0x4>

080006f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <UsageFault_Handler+0x4>

080006fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072c:	f000 f89a 	bl	8000864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000738:	4802      	ldr	r0, [pc, #8]	; (8000744 <OTG_FS_IRQHandler+0x10>)
 800073a:	f000 fcee 	bl	800111a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200015fc 	.word	0x200015fc

08000748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <SystemInit+0x20>)
 800074e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000752:	4a05      	ldr	r2, [pc, #20]	; (8000768 <SystemInit+0x20>)
 8000754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800076c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000772:	490e      	ldr	r1, [pc, #56]	; (80007ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000774:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000788:	4c0b      	ldr	r4, [pc, #44]	; (80007b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000796:	f7ff ffd7 	bl	8000748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079a:	f006 fb8b 	bl	8006eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800079e:	f7ff fe95 	bl	80004cc <main>
  bx  lr    
 80007a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ac:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80007b0:	08006f9c 	.word	0x08006f9c
  ldr r2, =_sbss
 80007b4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80007b8:	20001d28 	.word	0x20001d28

080007bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC_IRQHandler>
	...

080007c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_Init+0x40>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <HAL_Init+0x40>)
 80007ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_Init+0x40>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <HAL_Init+0x40>)
 80007d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <HAL_Init+0x40>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a07      	ldr	r2, [pc, #28]	; (8000800 <HAL_Init+0x40>)
 80007e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 f94f 	bl	8000a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ee:	200f      	movs	r0, #15
 80007f0:	f000 f808 	bl	8000804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f4:	f7ff ff4c 	bl	8000690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023c00 	.word	0x40023c00

08000804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_InitTick+0x54>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_InitTick+0x58>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081a:	fbb3 f3f1 	udiv	r3, r3, r1
 800081e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f967 	bl	8000af6 <HAL_SYSTICK_Config>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	e00e      	b.n	8000850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	d80a      	bhi.n	800084e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000838:	2200      	movs	r2, #0
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f000 f92f 	bl	8000aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000844:	4a06      	ldr	r2, [pc, #24]	; (8000860 <HAL_InitTick+0x5c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800084a:	2300      	movs	r3, #0
 800084c:	e000      	b.n	8000850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000000 	.word	0x20000000
 800085c:	20000008 	.word	0x20000008
 8000860:	20000004 	.word	0x20000004

08000864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_IncTick+0x20>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_IncTick+0x24>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4413      	add	r3, r2
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <HAL_IncTick+0x24>)
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000008 	.word	0x20000008
 8000888:	20000118 	.word	0x20000118

0800088c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return uwTick;
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <HAL_GetTick+0x14>)
 8000892:	681b      	ldr	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	20000118 	.word	0x20000118

080008a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008ac:	f7ff ffee 	bl	800088c <HAL_GetTick>
 80008b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008bc:	d005      	beq.n	80008ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_Delay+0x44>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	461a      	mov	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	4413      	add	r3, r2
 80008c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008ca:	bf00      	nop
 80008cc:	f7ff ffde 	bl	800088c <HAL_GetTick>
 80008d0:	4602      	mov	r2, r0
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d8f7      	bhi.n	80008cc <HAL_Delay+0x28>
  {
  }
}
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000008 	.word	0x20000008

080008ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000908:	4013      	ands	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091e:	4a04      	ldr	r2, [pc, #16]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	60d3      	str	r3, [r2, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <__NVIC_GetPriorityGrouping+0x18>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	f003 0307 	and.w	r3, r3, #7
}
 8000942:	4618      	mov	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	2b00      	cmp	r3, #0
 8000960:	db0b      	blt.n	800097a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 021f 	and.w	r2, r3, #31
 8000968:	4907      	ldr	r1, [pc, #28]	; (8000988 <__NVIC_EnableIRQ+0x38>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	095b      	lsrs	r3, r3, #5
 8000970:	2001      	movs	r0, #1
 8000972:	fa00 f202 	lsl.w	r2, r0, r2
 8000976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e100 	.word	0xe000e100

0800098c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	db0a      	blt.n	80009b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	490c      	ldr	r1, [pc, #48]	; (80009d8 <__NVIC_SetPriority+0x4c>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	440b      	add	r3, r1
 80009b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b4:	e00a      	b.n	80009cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4908      	ldr	r1, [pc, #32]	; (80009dc <__NVIC_SetPriority+0x50>)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	3b04      	subs	r3, #4
 80009c4:	0112      	lsls	r2, r2, #4
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	440b      	add	r3, r1
 80009ca:	761a      	strb	r2, [r3, #24]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000e100 	.word	0xe000e100
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	f1c3 0307 	rsb	r3, r3, #7
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	bf28      	it	cs
 80009fe:	2304      	movcs	r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3304      	adds	r3, #4
 8000a06:	2b06      	cmp	r3, #6
 8000a08:	d902      	bls.n	8000a10 <NVIC_EncodePriority+0x30>
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3b03      	subs	r3, #3
 8000a0e:	e000      	b.n	8000a12 <NVIC_EncodePriority+0x32>
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	f04f 32ff 	mov.w	r2, #4294967295
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	401a      	ands	r2, r3
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a28:	f04f 31ff 	mov.w	r1, #4294967295
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	43d9      	mvns	r1, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	4313      	orrs	r3, r2
         );
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3724      	adds	r7, #36	; 0x24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a58:	d301      	bcc.n	8000a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00f      	b.n	8000a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <SysTick_Config+0x40>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a66:	210f      	movs	r1, #15
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f7ff ff8e 	bl	800098c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SysTick_Config+0x40>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a76:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <SysTick_Config+0x40>)
 8000a78:	2207      	movs	r2, #7
 8000a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	e000e010 	.word	0xe000e010

08000a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ff29 	bl	80008ec <__NVIC_SetPriorityGrouping>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
 8000aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab4:	f7ff ff3e 	bl	8000934 <__NVIC_GetPriorityGrouping>
 8000ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	6978      	ldr	r0, [r7, #20]
 8000ac0:	f7ff ff8e 	bl	80009e0 <NVIC_EncodePriority>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff5d 	bl	800098c <__NVIC_SetPriority>
}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff31 	bl	8000950 <__NVIC_EnableIRQ>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff ffa2 	bl	8000a48 <SysTick_Config>
 8000b04:	4603      	mov	r3, r0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b089      	sub	sp, #36	; 0x24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
 8000b2a:	e16b      	b.n	8000e04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	697a      	ldr	r2, [r7, #20]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	f040 815a 	bne.w	8000dfe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 0303 	and.w	r3, r3, #3
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d005      	beq.n	8000b62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d130      	bne.n	8000bc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	4013      	ands	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	68da      	ldr	r2, [r3, #12]
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b98:	2201      	movs	r2, #1
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	f003 0201 	and.w	r2, r3, #1
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	2b03      	cmp	r3, #3
 8000bce:	d017      	beq.n	8000c00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	2203      	movs	r2, #3
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d123      	bne.n	8000c54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	08da      	lsrs	r2, r3, #3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3208      	adds	r2, #8
 8000c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	f003 0307 	and.w	r3, r3, #7
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	220f      	movs	r2, #15
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	691a      	ldr	r2, [r3, #16]
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	08da      	lsrs	r2, r3, #3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3208      	adds	r2, #8
 8000c4e:	69b9      	ldr	r1, [r7, #24]
 8000c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	2203      	movs	r2, #3
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0203 	and.w	r2, r3, #3
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 80b4 	beq.w	8000dfe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b60      	ldr	r3, [pc, #384]	; (8000e1c <HAL_GPIO_Init+0x30c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	4a5f      	ldr	r2, [pc, #380]	; (8000e1c <HAL_GPIO_Init+0x30c>)
 8000ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca6:	4b5d      	ldr	r3, [pc, #372]	; (8000e1c <HAL_GPIO_Init+0x30c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cb2:	4a5b      	ldr	r2, [pc, #364]	; (8000e20 <HAL_GPIO_Init+0x310>)
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	089b      	lsrs	r3, r3, #2
 8000cb8:	3302      	adds	r3, #2
 8000cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	220f      	movs	r2, #15
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a52      	ldr	r2, [pc, #328]	; (8000e24 <HAL_GPIO_Init+0x314>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d02b      	beq.n	8000d36 <HAL_GPIO_Init+0x226>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a51      	ldr	r2, [pc, #324]	; (8000e28 <HAL_GPIO_Init+0x318>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d025      	beq.n	8000d32 <HAL_GPIO_Init+0x222>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a50      	ldr	r2, [pc, #320]	; (8000e2c <HAL_GPIO_Init+0x31c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d01f      	beq.n	8000d2e <HAL_GPIO_Init+0x21e>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a4f      	ldr	r2, [pc, #316]	; (8000e30 <HAL_GPIO_Init+0x320>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d019      	beq.n	8000d2a <HAL_GPIO_Init+0x21a>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a4e      	ldr	r2, [pc, #312]	; (8000e34 <HAL_GPIO_Init+0x324>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d013      	beq.n	8000d26 <HAL_GPIO_Init+0x216>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a4d      	ldr	r2, [pc, #308]	; (8000e38 <HAL_GPIO_Init+0x328>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d00d      	beq.n	8000d22 <HAL_GPIO_Init+0x212>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a4c      	ldr	r2, [pc, #304]	; (8000e3c <HAL_GPIO_Init+0x32c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d007      	beq.n	8000d1e <HAL_GPIO_Init+0x20e>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a4b      	ldr	r2, [pc, #300]	; (8000e40 <HAL_GPIO_Init+0x330>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_GPIO_Init+0x20a>
 8000d16:	2307      	movs	r3, #7
 8000d18:	e00e      	b.n	8000d38 <HAL_GPIO_Init+0x228>
 8000d1a:	2308      	movs	r3, #8
 8000d1c:	e00c      	b.n	8000d38 <HAL_GPIO_Init+0x228>
 8000d1e:	2306      	movs	r3, #6
 8000d20:	e00a      	b.n	8000d38 <HAL_GPIO_Init+0x228>
 8000d22:	2305      	movs	r3, #5
 8000d24:	e008      	b.n	8000d38 <HAL_GPIO_Init+0x228>
 8000d26:	2304      	movs	r3, #4
 8000d28:	e006      	b.n	8000d38 <HAL_GPIO_Init+0x228>
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e004      	b.n	8000d38 <HAL_GPIO_Init+0x228>
 8000d2e:	2302      	movs	r3, #2
 8000d30:	e002      	b.n	8000d38 <HAL_GPIO_Init+0x228>
 8000d32:	2301      	movs	r3, #1
 8000d34:	e000      	b.n	8000d38 <HAL_GPIO_Init+0x228>
 8000d36:	2300      	movs	r3, #0
 8000d38:	69fa      	ldr	r2, [r7, #28]
 8000d3a:	f002 0203 	and.w	r2, r2, #3
 8000d3e:	0092      	lsls	r2, r2, #2
 8000d40:	4093      	lsls	r3, r2
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d48:	4935      	ldr	r1, [pc, #212]	; (8000e20 <HAL_GPIO_Init+0x310>)
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	3302      	adds	r3, #2
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d56:	4b3b      	ldr	r3, [pc, #236]	; (8000e44 <HAL_GPIO_Init+0x334>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d7a:	4a32      	ldr	r2, [pc, #200]	; (8000e44 <HAL_GPIO_Init+0x334>)
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d80:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <HAL_GPIO_Init+0x334>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000da4:	4a27      	ldr	r2, [pc, #156]	; (8000e44 <HAL_GPIO_Init+0x334>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000daa:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <HAL_GPIO_Init+0x334>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dce:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <HAL_GPIO_Init+0x334>)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HAL_GPIO_Init+0x334>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000df8:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <HAL_GPIO_Init+0x334>)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3301      	adds	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	2b0f      	cmp	r3, #15
 8000e08:	f67f ae90 	bls.w	8000b2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40013800 	.word	0x40013800
 8000e24:	40020000 	.word	0x40020000
 8000e28:	40020400 	.word	0x40020400
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40020c00 	.word	0x40020c00
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40021400 	.word	0x40021400
 8000e3c:	40021800 	.word	0x40021800
 8000e40:	40021c00 	.word	0x40021c00
 8000e44:	40013c00 	.word	0x40013c00

08000e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	807b      	strh	r3, [r7, #2]
 8000e54:	4613      	mov	r3, r2
 8000e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e58:	787b      	ldrb	r3, [r7, #1]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e5e:	887a      	ldrh	r2, [r7, #2]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e64:	e003      	b.n	8000e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e66:	887b      	ldrh	r3, [r7, #2]
 8000e68:	041a      	lsls	r2, r3, #16
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	619a      	str	r2, [r3, #24]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7c:	b08f      	sub	sp, #60	; 0x3c
 8000e7e:	af0a      	add	r7, sp, #40	; 0x28
 8000e80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e10f      	b.n	80010ac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d106      	bne.n	8000eac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f005 fcf0 	bl	800688c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2203      	movs	r2, #3
 8000eb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f001 ffd7 	bl	8002e7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	687e      	ldr	r6, [r7, #4]
 8000ed8:	466d      	mov	r5, sp
 8000eda:	f106 0410 	add.w	r4, r6, #16
 8000ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ee6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000eea:	e885 0003 	stmia.w	r5, {r0, r1}
 8000eee:	1d33      	adds	r3, r6, #4
 8000ef0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ef2:	6838      	ldr	r0, [r7, #0]
 8000ef4:	f001 feae 	bl	8002c54 <USB_CoreInit>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d005      	beq.n	8000f0a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2202      	movs	r2, #2
 8000f02:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e0d0      	b.n	80010ac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f001 ffc5 	bl	8002ea0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	e04a      	b.n	8000fb2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	4613      	mov	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	4413      	add	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	333d      	adds	r3, #61	; 0x3d
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	4613      	mov	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	333c      	adds	r3, #60	; 0x3c
 8000f40:	7bfa      	ldrb	r2, [r7, #15]
 8000f42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	b298      	uxth	r0, r3
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	4413      	add	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	440b      	add	r3, r1
 8000f56:	3344      	adds	r3, #68	; 0x44
 8000f58:	4602      	mov	r2, r0
 8000f5a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f5c:	7bfa      	ldrb	r2, [r7, #15]
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	4613      	mov	r3, r2
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	4413      	add	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	440b      	add	r3, r1
 8000f6a:	3340      	adds	r3, #64	; 0x40
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4613      	mov	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	4413      	add	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	3348      	adds	r3, #72	; 0x48
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f84:	7bfa      	ldrb	r2, [r7, #15]
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	334c      	adds	r3, #76	; 0x4c
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f98:	7bfa      	ldrb	r2, [r7, #15]
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3354      	adds	r3, #84	; 0x54
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3af      	bcc.n	8000f1c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e044      	b.n	800104c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fc2:	7bfa      	ldrb	r2, [r7, #15]
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000fea:	7bfa      	ldrb	r2, [r7, #15]
 8000fec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	4413      	add	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4613      	mov	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4413      	add	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	440b      	add	r3, r1
 8001012:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	4413      	add	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	440b      	add	r3, r1
 8001028:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001030:	7bfa      	ldrb	r2, [r7, #15]
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	4413      	add	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	3301      	adds	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	429a      	cmp	r2, r3
 8001054:	d3b5      	bcc.n	8000fc2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	687e      	ldr	r6, [r7, #4]
 800105e:	466d      	mov	r5, sp
 8001060:	f106 0410 	add.w	r4, r6, #16
 8001064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800106a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001070:	e885 0003 	stmia.w	r5, {r0, r1}
 8001074:	1d33      	adds	r3, r6, #4
 8001076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001078:	6838      	ldr	r0, [r7, #0]
 800107a:	f001 ff5d 	bl	8002f38 <USB_DevInit>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2202      	movs	r2, #2
 8001088:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e00d      	b.n	80010ac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f003 f8ac 	bl	8004202 <USB_DevDisconnect>

  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d101      	bne.n	80010d0 <HAL_PCD_Start+0x1c>
 80010cc:	2302      	movs	r3, #2
 80010ce:	e020      	b.n	8001112 <HAL_PCD_Start+0x5e>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d109      	bne.n	80010f4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d005      	beq.n	80010f4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 feaf 	bl	8002e5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f003 f85c 	bl	80041c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800111a:	b590      	push	{r4, r7, lr}
 800111c:	b08d      	sub	sp, #52	; 0x34
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f003 f91a 	bl	800436a <USB_GetMode>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	f040 848a 	bne.w	8001a52 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f003 f87e 	bl	8004244 <USB_ReadInterrupts>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8480 	beq.w	8001a50 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f003 f86b 	bl	8004244 <USB_ReadInterrupts>
 800116e:	4603      	mov	r3, r0
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b02      	cmp	r3, #2
 8001176:	d107      	bne.n	8001188 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	695a      	ldr	r2, [r3, #20]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f002 0202 	and.w	r2, r2, #2
 8001186:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f003 f859 	bl	8004244 <USB_ReadInterrupts>
 8001192:	4603      	mov	r3, r0
 8001194:	f003 0310 	and.w	r3, r3, #16
 8001198:	2b10      	cmp	r3, #16
 800119a:	d161      	bne.n	8001260 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	699a      	ldr	r2, [r3, #24]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0210 	bic.w	r2, r2, #16
 80011aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	f003 020f 	and.w	r2, r3, #15
 80011b8:	4613      	mov	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4413      	add	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	3304      	adds	r3, #4
 80011ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	0c5b      	lsrs	r3, r3, #17
 80011d0:	f003 030f 	and.w	r3, r3, #15
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d124      	bne.n	8001222 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011de:	4013      	ands	r3, r2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d035      	beq.n	8001250 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	091b      	lsrs	r3, r3, #4
 80011ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	461a      	mov	r2, r3
 80011f6:	6a38      	ldr	r0, [r7, #32]
 80011f8:	f002 fe90 	bl	8003f1c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001208:	441a      	add	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	6a1a      	ldr	r2, [r3, #32]
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	091b      	lsrs	r3, r3, #4
 8001216:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800121a:	441a      	add	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	621a      	str	r2, [r3, #32]
 8001220:	e016      	b.n	8001250 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	0c5b      	lsrs	r3, r3, #17
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	2b06      	cmp	r3, #6
 800122c:	d110      	bne.n	8001250 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001234:	2208      	movs	r2, #8
 8001236:	4619      	mov	r1, r3
 8001238:	6a38      	ldr	r0, [r7, #32]
 800123a:	f002 fe6f 	bl	8003f1c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	6a1a      	ldr	r2, [r3, #32]
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	091b      	lsrs	r3, r3, #4
 8001246:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800124a:	441a      	add	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	699a      	ldr	r2, [r3, #24]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0210 	orr.w	r2, r2, #16
 800125e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f002 ffed 	bl	8004244 <USB_ReadInterrupts>
 800126a:	4603      	mov	r3, r0
 800126c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001270:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001274:	f040 80a7 	bne.w	80013c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f002 fff2 	bl	800426a <USB_ReadDevAllOutEpInterrupt>
 8001286:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001288:	e099      	b.n	80013be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800128a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 808e 	beq.w	80013b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 f816 	bl	80042d2 <USB_ReadDevOutEPInterrupt>
 80012a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00c      	beq.n	80012cc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	015a      	lsls	r2, r3, #5
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	4413      	add	r3, r2
 80012ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012be:	461a      	mov	r2, r3
 80012c0:	2301      	movs	r3, #1
 80012c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 fec2 	bl	8002050 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00c      	beq.n	80012f0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	015a      	lsls	r2, r3, #5
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	4413      	add	r3, r2
 80012de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012e2:	461a      	mov	r2, r3
 80012e4:	2308      	movs	r3, #8
 80012e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 ff98 	bl	8002220 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d008      	beq.n	800130c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	015a      	lsls	r2, r3, #5
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	4413      	add	r3, r2
 8001302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001306:	461a      	mov	r2, r3
 8001308:	2310      	movs	r3, #16
 800130a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d030      	beq.n	8001378 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131e:	2b80      	cmp	r3, #128	; 0x80
 8001320:	d109      	bne.n	8001336 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	69fa      	ldr	r2, [r7, #28]
 800132c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001330:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001334:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001338:	4613      	mov	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	3304      	adds	r3, #4
 800134a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	78db      	ldrb	r3, [r3, #3]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d108      	bne.n	8001366 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	2200      	movs	r2, #0
 8001358:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4619      	mov	r1, r3
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f005 fb99 	bl	8006a98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	015a      	lsls	r2, r3, #5
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	4413      	add	r3, r2
 800136e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001372:	461a      	mov	r2, r3
 8001374:	2302      	movs	r3, #2
 8001376:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	f003 0320 	and.w	r3, r3, #32
 800137e:	2b00      	cmp	r3, #0
 8001380:	d008      	beq.n	8001394 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	015a      	lsls	r2, r3, #5
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	4413      	add	r3, r2
 800138a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800138e:	461a      	mov	r2, r3
 8001390:	2320      	movs	r3, #32
 8001392:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d009      	beq.n	80013b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	015a      	lsls	r2, r3, #5
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	4413      	add	r3, r2
 80013a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013aa:	461a      	mov	r2, r3
 80013ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	3301      	adds	r3, #1
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ba:	085b      	lsrs	r3, r3, #1
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f47f af62 	bne.w	800128a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 ff3a 	bl	8004244 <USB_ReadInterrupts>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013da:	f040 80db 	bne.w	8001594 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 ff5b 	bl	800429e <USB_ReadDevAllInEpInterrupt>
 80013e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013ee:	e0cd      	b.n	800158c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 80c2 	beq.w	8001580 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f002 ff81 	bl	800430e <USB_ReadDevInEPInterrupt>
 800140c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b00      	cmp	r3, #0
 8001416:	d057      	beq.n	80014c8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	2201      	movs	r2, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800142c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43db      	mvns	r3, r3
 8001432:	69f9      	ldr	r1, [r7, #28]
 8001434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001438:	4013      	ands	r3, r2
 800143a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800143c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143e:	015a      	lsls	r2, r3, #5
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	4413      	add	r3, r2
 8001444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001448:	461a      	mov	r2, r3
 800144a:	2301      	movs	r3, #1
 800144c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d132      	bne.n	80014bc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145a:	4613      	mov	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	334c      	adds	r3, #76	; 0x4c
 8001466:	6819      	ldr	r1, [r3, #0]
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146c:	4613      	mov	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4403      	add	r3, r0
 8001476:	3348      	adds	r3, #72	; 0x48
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4419      	add	r1, r3
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001480:	4613      	mov	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	4413      	add	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4403      	add	r3, r0
 800148a:	334c      	adds	r3, #76	; 0x4c
 800148c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	2b00      	cmp	r3, #0
 8001492:	d113      	bne.n	80014bc <HAL_PCD_IRQHandler+0x3a2>
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001498:	4613      	mov	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	3354      	adds	r3, #84	; 0x54
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d108      	bne.n	80014bc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014b4:	461a      	mov	r2, r3
 80014b6:	2101      	movs	r1, #1
 80014b8:	f002 ff88 	bl	80043cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	4619      	mov	r1, r3
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f005 fa63 	bl	800698e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d008      	beq.n	80014e4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	015a      	lsls	r2, r3, #5
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	4413      	add	r3, r2
 80014da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014de:	461a      	mov	r2, r3
 80014e0:	2308      	movs	r3, #8
 80014e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d008      	beq.n	8001500 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	015a      	lsls	r2, r3, #5
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	4413      	add	r3, r2
 80014f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014fa:	461a      	mov	r2, r3
 80014fc:	2310      	movs	r3, #16
 80014fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001506:	2b00      	cmp	r3, #0
 8001508:	d008      	beq.n	800151c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	015a      	lsls	r2, r3, #5
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	4413      	add	r3, r2
 8001512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001516:	461a      	mov	r2, r3
 8001518:	2340      	movs	r3, #64	; 0x40
 800151a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d023      	beq.n	800156e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001526:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001528:	6a38      	ldr	r0, [r7, #32]
 800152a:	f001 fe69 	bl	8003200 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800152e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001530:	4613      	mov	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	3338      	adds	r3, #56	; 0x38
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	3304      	adds	r3, #4
 8001540:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	78db      	ldrb	r3, [r3, #3]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d108      	bne.n	800155c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2200      	movs	r2, #0
 800154e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	b2db      	uxtb	r3, r3
 8001554:	4619      	mov	r1, r3
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f005 fab0 	bl	8006abc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	015a      	lsls	r2, r3, #5
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	4413      	add	r3, r2
 8001564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001568:	461a      	mov	r2, r3
 800156a:	2302      	movs	r3, #2
 800156c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001574:	2b00      	cmp	r3, #0
 8001576:	d003      	beq.n	8001580 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 fcdb 	bl	8001f36 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	3301      	adds	r3, #1
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158e:	2b00      	cmp	r3, #0
 8001590:	f47f af2e 	bne.w	80013f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f002 fe53 	bl	8004244 <USB_ReadInterrupts>
 800159e:	4603      	mov	r3, r0
 80015a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015a8:	d122      	bne.n	80015f0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	69fa      	ldr	r2, [r7, #28]
 80015b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d108      	bne.n	80015da <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015d0:	2100      	movs	r1, #0
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fec2 	bl	800235c <HAL_PCDEx_LPM_Callback>
 80015d8:	e002      	b.n	80015e0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f005 fa4e 	bl	8006a7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695a      	ldr	r2, [r3, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80015ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f002 fe25 	bl	8004244 <USB_ReadInterrupts>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001604:	d112      	bne.n	800162c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b01      	cmp	r3, #1
 8001614:	d102      	bne.n	800161c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f005 fa0a 	bl	8006a30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800162a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f002 fe07 	bl	8004244 <USB_ReadInterrupts>
 8001636:	4603      	mov	r3, r0
 8001638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800163c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001640:	f040 80b7 	bne.w	80017b2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2110      	movs	r1, #16
 800165e:	4618      	mov	r0, r3
 8001660:	f001 fdce 	bl	8003200 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001668:	e046      	b.n	80016f8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800166a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166c:	015a      	lsls	r2, r3, #5
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	4413      	add	r3, r2
 8001672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001676:	461a      	mov	r2, r3
 8001678:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800167c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001680:	015a      	lsls	r2, r3, #5
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	4413      	add	r3, r2
 8001686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800168e:	0151      	lsls	r1, r2, #5
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	440a      	add	r2, r1
 8001694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001698:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800169c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800169e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a0:	015a      	lsls	r2, r3, #5
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	4413      	add	r3, r2
 80016a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016aa:	461a      	mov	r2, r3
 80016ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b4:	015a      	lsls	r2, r3, #5
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	4413      	add	r3, r2
 80016ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016c2:	0151      	lsls	r1, r2, #5
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	440a      	add	r2, r1
 80016c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80016d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d4:	015a      	lsls	r2, r3, #5
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	4413      	add	r3, r2
 80016da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016e2:	0151      	lsls	r1, r2, #5
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	440a      	add	r2, r1
 80016e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80016ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f4:	3301      	adds	r3, #1
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016fe:	429a      	cmp	r2, r3
 8001700:	d3b3      	bcc.n	800166a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001710:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001714:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	2b00      	cmp	r3, #0
 800171c:	d016      	beq.n	800174c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001728:	69fa      	ldr	r2, [r7, #28]
 800172a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800172e:	f043 030b 	orr.w	r3, r3, #11
 8001732:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001744:	f043 030b 	orr.w	r3, r3, #11
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	e015      	b.n	8001778 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800175a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800175e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001762:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	69fa      	ldr	r2, [r7, #28]
 800176e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001772:	f043 030b 	orr.w	r3, r3, #11
 8001776:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001786:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800178a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800179c:	461a      	mov	r2, r3
 800179e:	f002 fe15 	bl	80043cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f002 fd44 	bl	8004244 <USB_ReadInterrupts>
 80017bc:	4603      	mov	r3, r0
 80017be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017c6:	d124      	bne.n	8001812 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f002 fdda 	bl	8004386 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f001 fd8f 	bl	80032fa <USB_GetDevSpeed>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681c      	ldr	r4, [r3, #0]
 80017e8:	f001 fa28 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 80017ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	461a      	mov	r2, r3
 80017f6:	4620      	mov	r0, r4
 80017f8:	f001 fa8e 	bl	8002d18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f005 f8ee 	bl	80069de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695a      	ldr	r2, [r3, #20]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001810:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f002 fd14 	bl	8004244 <USB_ReadInterrupts>
 800181c:	4603      	mov	r3, r0
 800181e:	f003 0308 	and.w	r3, r3, #8
 8001822:	2b08      	cmp	r3, #8
 8001824:	d10a      	bne.n	800183c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f005 f8cb 	bl	80069c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f002 0208 	and.w	r2, r2, #8
 800183a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f002 fcff 	bl	8004244 <USB_ReadInterrupts>
 8001846:	4603      	mov	r3, r0
 8001848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184c:	2b80      	cmp	r3, #128	; 0x80
 800184e:	d122      	bne.n	8001896 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800185c:	2301      	movs	r3, #1
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
 8001860:	e014      	b.n	800188c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001866:	4613      	mov	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d105      	bne.n	8001886 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	b2db      	uxtb	r3, r3
 800187e:	4619      	mov	r1, r3
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 fb27 	bl	8001ed4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	3301      	adds	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001892:	429a      	cmp	r2, r3
 8001894:	d3e5      	bcc.n	8001862 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f002 fcd2 	bl	8004244 <USB_ReadInterrupts>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018aa:	d13b      	bne.n	8001924 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018ac:	2301      	movs	r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
 80018b0:	e02b      	b.n	800190a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	015a      	lsls	r2, r3, #5
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c6:	4613      	mov	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	3340      	adds	r3, #64	; 0x40
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d115      	bne.n	8001904 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80018d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018da:	2b00      	cmp	r3, #0
 80018dc:	da12      	bge.n	8001904 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	333f      	adds	r3, #63	; 0x3f
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	4619      	mov	r1, r3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 fae8 	bl	8001ed4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	3301      	adds	r3, #1
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001910:	429a      	cmp	r2, r3
 8001912:	d3ce      	bcc.n	80018b2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001922:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f002 fc8b 	bl	8004244 <USB_ReadInterrupts>
 800192e:	4603      	mov	r3, r0
 8001930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001934:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001938:	d155      	bne.n	80019e6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800193a:	2301      	movs	r3, #1
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
 800193e:	e045      	b.n	80019cc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	015a      	lsls	r2, r3, #5
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	4413      	add	r3, r2
 8001948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001954:	4613      	mov	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d12e      	bne.n	80019c6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001968:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800196a:	2b00      	cmp	r3, #0
 800196c:	da2b      	bge.n	80019c6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800197a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800197e:	429a      	cmp	r2, r3
 8001980:	d121      	bne.n	80019c6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001986:	4613      	mov	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10a      	bne.n	80019c6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	69fa      	ldr	r2, [r7, #28]
 80019ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c2:	6053      	str	r3, [r2, #4]
            break;
 80019c4:	e007      	b.n	80019d6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	3301      	adds	r3, #1
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d3b4      	bcc.n	8001940 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80019e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f002 fc2a 	bl	8004244 <USB_ReadInterrupts>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fa:	d10a      	bne.n	8001a12 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f005 f86f 	bl	8006ae0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695a      	ldr	r2, [r3, #20]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 fc14 	bl	8004244 <USB_ReadInterrupts>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d115      	bne.n	8001a52 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f005 f85f 	bl	8006afc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6859      	ldr	r1, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	e000      	b.n	8001a52 <HAL_PCD_IRQHandler+0x938>
      return;
 8001a50:	bf00      	nop
    }
  }
}
 8001a52:	3734      	adds	r7, #52	; 0x34
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd90      	pop	{r4, r7, pc}

08001a58 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_PCD_SetAddress+0x1a>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e013      	b.n	8001a9a <HAL_PCD_SetAddress+0x42>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	78fa      	ldrb	r2, [r7, #3]
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 fb72 	bl	8004174 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	4608      	mov	r0, r1
 8001aac:	4611      	mov	r1, r2
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	70fb      	strb	r3, [r7, #3]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	803b      	strh	r3, [r7, #0]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	da0f      	bge.n	8001ae8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	f003 020f 	and.w	r2, r3, #15
 8001ace:	4613      	mov	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	3338      	adds	r3, #56	; 0x38
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	3304      	adds	r3, #4
 8001ade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	705a      	strb	r2, [r3, #1]
 8001ae6:	e00f      	b.n	8001b08 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	f003 020f 	and.w	r2, r3, #15
 8001aee:	4613      	mov	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	3304      	adds	r3, #4
 8001b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b14:	883a      	ldrh	r2, [r7, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	78ba      	ldrb	r2, [r7, #2]
 8001b1e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	785b      	ldrb	r3, [r3, #1]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b32:	78bb      	ldrb	r3, [r7, #2]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d102      	bne.n	8001b3e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_PCD_EP_Open+0xaa>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e00e      	b.n	8001b6a <HAL_PCD_EP_Open+0xc8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68f9      	ldr	r1, [r7, #12]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f001 fbf2 	bl	8003344 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001b68:	7afb      	ldrb	r3, [r7, #11]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da0f      	bge.n	8001ba6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	f003 020f 	and.w	r2, r3, #15
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	3338      	adds	r3, #56	; 0x38
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	705a      	strb	r2, [r3, #1]
 8001ba4:	e00f      	b.n	8001bc6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	f003 020f 	and.w	r2, r3, #15
 8001bac:	4613      	mov	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_PCD_EP_Close+0x6e>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e00e      	b.n	8001bfe <HAL_PCD_EP_Close+0x8c>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68f9      	ldr	r1, [r7, #12]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f001 fc30 	bl	8003454 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	460b      	mov	r3, r1
 8001c14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c16:	7afb      	ldrb	r3, [r7, #11]
 8001c18:	f003 020f 	and.w	r2, r3, #15
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2200      	movs	r2, #0
 8001c46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c48:	7afb      	ldrb	r3, [r7, #11]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d102      	bne.n	8001c62 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c62:	7afb      	ldrb	r3, [r7, #11]
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	6979      	ldr	r1, [r7, #20]
 8001c7a:	f001 ff0f 	bl	8003a9c <USB_EP0StartXfer>
 8001c7e:	e008      	b.n	8001c92 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	6979      	ldr	r1, [r7, #20]
 8001c8e:	f001 fcbd 	bl	800360c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	f003 020f 	and.w	r2, r3, #15
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001cbe:	681b      	ldr	r3, [r3, #0]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	607a      	str	r2, [r7, #4]
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cdc:	7afb      	ldrb	r3, [r7, #11]
 8001cde:	f003 020f 	and.w	r2, r3, #15
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	3338      	adds	r3, #56	; 0x38
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2200      	movs	r2, #0
 8001d04:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0c:	7afb      	ldrb	r3, [r7, #11]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d102      	bne.n	8001d26 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d26:	7afb      	ldrb	r3, [r7, #11]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	6979      	ldr	r1, [r7, #20]
 8001d3e:	f001 fead 	bl	8003a9c <USB_EP0StartXfer>
 8001d42:	e008      	b.n	8001d56 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	6979      	ldr	r1, [r7, #20]
 8001d52:	f001 fc5b 	bl	800360c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	f003 020f 	and.w	r2, r3, #15
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d901      	bls.n	8001d7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e050      	b.n	8001e20 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	da0f      	bge.n	8001da6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	f003 020f 	and.w	r2, r3, #15
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	3338      	adds	r3, #56	; 0x38
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2201      	movs	r2, #1
 8001da2:	705a      	strb	r2, [r3, #1]
 8001da4:	e00d      	b.n	8001dc2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001da6:	78fa      	ldrb	r2, [r7, #3]
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	4413      	add	r3, r2
 8001db8:	3304      	adds	r3, #4
 8001dba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_PCD_EP_SetStall+0x82>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e01e      	b.n	8001e20 <HAL_PCD_EP_SetStall+0xc0>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68f9      	ldr	r1, [r7, #12]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f002 f8eb 	bl	8003fcc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10a      	bne.n	8001e16 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	b2d9      	uxtb	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e10:	461a      	mov	r2, r3
 8001e12:	f002 fadb 	bl	80043cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	f003 020f 	and.w	r2, r3, #15
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d901      	bls.n	8001e46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e042      	b.n	8001ecc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	da0f      	bge.n	8001e6e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	f003 020f 	and.w	r2, r3, #15
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	3338      	adds	r3, #56	; 0x38
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	3304      	adds	r3, #4
 8001e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	705a      	strb	r2, [r3, #1]
 8001e6c:	e00f      	b.n	8001e8e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	f003 020f 	and.w	r2, r3, #15
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	3304      	adds	r3, #4
 8001e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_PCD_EP_ClrStall+0x86>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e00e      	b.n	8001ecc <HAL_PCD_EP_ClrStall+0xa4>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68f9      	ldr	r1, [r7, #12]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 f8f3 	bl	80040a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	da0c      	bge.n	8001f02 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	f003 020f 	and.w	r2, r3, #15
 8001eee:	4613      	mov	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	3338      	adds	r3, #56	; 0x38
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	3304      	adds	r3, #4
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	e00c      	b.n	8001f1c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	f003 020f 	and.w	r2, r3, #15
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	4413      	add	r3, r2
 8001f18:	3304      	adds	r3, #4
 8001f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68f9      	ldr	r1, [r7, #12]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f001 ff12 	bl	8003d4c <USB_EPStopXfer>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f2c:	7afb      	ldrb	r3, [r7, #11]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b08a      	sub	sp, #40	; 0x28
 8001f3a:	af02      	add	r7, sp, #8
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	3338      	adds	r3, #56	; 0x38
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6a1a      	ldr	r2, [r3, #32]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d901      	bls.n	8001f6e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e06c      	b.n	8002048 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	699a      	ldr	r2, [r3, #24]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d902      	bls.n	8001f8a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3303      	adds	r3, #3
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f92:	e02b      	b.n	8001fec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	69fa      	ldr	r2, [r7, #28]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d902      	bls.n	8001fb0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	3303      	adds	r3, #3
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6919      	ldr	r1, [r3, #16]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	4603      	mov	r3, r0
 8001fce:	6978      	ldr	r0, [r7, #20]
 8001fd0:	f001 ff66 	bl	8003ea0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	441a      	add	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a1a      	ldr	r2, [r3, #32]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	441a      	add	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d809      	bhi.n	8002016 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a1a      	ldr	r2, [r3, #32]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800200a:	429a      	cmp	r2, r3
 800200c:	d203      	bcs.n	8002016 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1be      	bne.n	8001f94 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	429a      	cmp	r2, r3
 8002020:	d811      	bhi.n	8002046 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	2201      	movs	r2, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	43db      	mvns	r3, r3
 800203c:	6939      	ldr	r1, [r7, #16]
 800203e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002042:	4013      	ands	r3, r2
 8002044:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3720      	adds	r7, #32
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	333c      	adds	r3, #60	; 0x3c
 8002068:	3304      	adds	r3, #4
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	015a      	lsls	r2, r3, #5
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4413      	add	r3, r2
 8002076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d17b      	bne.n	800217e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d015      	beq.n	80020bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	4a61      	ldr	r2, [pc, #388]	; (8002218 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	f240 80b9 	bls.w	800220c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80b3 	beq.w	800220c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b2:	461a      	mov	r2, r3
 80020b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020b8:	6093      	str	r3, [r2, #8]
 80020ba:	e0a7      	b.n	800220c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f003 0320 	and.w	r3, r3, #32
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d009      	beq.n	80020da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d2:	461a      	mov	r2, r3
 80020d4:	2320      	movs	r3, #32
 80020d6:	6093      	str	r3, [r2, #8]
 80020d8:	e098      	b.n	800220c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f040 8093 	bne.w	800220c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	4a4b      	ldr	r2, [pc, #300]	; (8002218 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d90f      	bls.n	800210e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002104:	461a      	mov	r2, r3
 8002106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800210a:	6093      	str	r3, [r2, #8]
 800210c:	e07e      	b.n	800220c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	4413      	add	r3, r2
 8002120:	3304      	adds	r3, #4
 8002122:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	69da      	ldr	r2, [r3, #28]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	0159      	lsls	r1, r3, #5
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	440b      	add	r3, r1
 8002130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213a:	1ad2      	subs	r2, r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d114      	bne.n	8002170 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002158:	461a      	mov	r2, r3
 800215a:	2101      	movs	r1, #1
 800215c:	f002 f936 	bl	80043cc <USB_EP0_OutStart>
 8002160:	e006      	b.n	8002170 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	441a      	add	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	4619      	mov	r1, r3
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f004 fbee 	bl	8006958 <HAL_PCD_DataOutStageCallback>
 800217c:	e046      	b.n	800220c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	4a26      	ldr	r2, [pc, #152]	; (800221c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d124      	bne.n	80021d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	4413      	add	r3, r2
 8002198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219c:	461a      	mov	r2, r3
 800219e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021a2:	6093      	str	r3, [r2, #8]
 80021a4:	e032      	b.n	800220c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021bc:	461a      	mov	r2, r3
 80021be:	2320      	movs	r3, #32
 80021c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	4619      	mov	r1, r3
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f004 fbc5 	bl	8006958 <HAL_PCD_DataOutStageCallback>
 80021ce:	e01d      	b.n	800220c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d114      	bne.n	8002200 <PCD_EP_OutXfrComplete_int+0x1b0>
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d108      	bne.n	8002200 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021f8:	461a      	mov	r2, r3
 80021fa:	2100      	movs	r1, #0
 80021fc:	f002 f8e6 	bl	80043cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	4619      	mov	r1, r3
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f004 fba6 	bl	8006958 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3720      	adds	r7, #32
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	4f54300a 	.word	0x4f54300a
 800221c:	4f54310a 	.word	0x4f54310a

08002220 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	333c      	adds	r3, #60	; 0x3c
 8002238:	3304      	adds	r3, #4
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4413      	add	r3, r2
 8002246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d90e      	bls.n	8002274 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800225c:	2b00      	cmp	r3, #0
 800225e:	d009      	beq.n	8002274 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4413      	add	r3, r2
 8002268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800226c:	461a      	mov	r2, r3
 800226e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002272:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f004 fb5d 	bl	8006934 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d90c      	bls.n	800229c <PCD_EP_OutSetupPacket_int+0x7c>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d108      	bne.n	800229c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002294:	461a      	mov	r2, r3
 8002296:	2101      	movs	r1, #1
 8002298:	f002 f898 	bl	80043cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	4f54300a 	.word	0x4f54300a

080022ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
 80022b8:	4613      	mov	r3, r2
 80022ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d107      	bne.n	80022da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022ca:	883b      	ldrh	r3, [r7, #0]
 80022cc:	0419      	lsls	r1, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
 80022d8:	e028      	b.n	800232c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	0c1b      	lsrs	r3, r3, #16
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	4413      	add	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022e8:	2300      	movs	r3, #0
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	e00d      	b.n	800230a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	3340      	adds	r3, #64	; 0x40
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	0c1b      	lsrs	r3, r3, #16
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	4413      	add	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	3301      	adds	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	3b01      	subs	r3, #1
 8002310:	429a      	cmp	r2, r3
 8002312:	d3ec      	bcc.n	80022ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002314:	883b      	ldrh	r3, [r7, #0]
 8002316:	0418      	lsls	r0, r3, #16
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6819      	ldr	r1, [r3, #0]
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	3b01      	subs	r3, #1
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	4302      	orrs	r2, r0
 8002324:	3340      	adds	r3, #64	; 0x40
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	887a      	ldrh	r2, [r7, #2]
 800234c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e267      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d075      	beq.n	800247e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002392:	4b88      	ldr	r3, [pc, #544]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b04      	cmp	r3, #4
 800239c:	d00c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239e:	4b85      	ldr	r3, [pc, #532]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d112      	bne.n	80023d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023aa:	4b82      	ldr	r3, [pc, #520]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023b6:	d10b      	bne.n	80023d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	4b7e      	ldr	r3, [pc, #504]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d05b      	beq.n	800247c <HAL_RCC_OscConfig+0x108>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d157      	bne.n	800247c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e242      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d8:	d106      	bne.n	80023e8 <HAL_RCC_OscConfig+0x74>
 80023da:	4b76      	ldr	r3, [pc, #472]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a75      	ldr	r2, [pc, #468]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e01d      	b.n	8002424 <HAL_RCC_OscConfig+0xb0>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x98>
 80023f2:	4b70      	ldr	r3, [pc, #448]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a6f      	ldr	r2, [pc, #444]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b6d      	ldr	r3, [pc, #436]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a6c      	ldr	r2, [pc, #432]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0xb0>
 800240c:	4b69      	ldr	r3, [pc, #420]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a68      	ldr	r2, [pc, #416]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b66      	ldr	r3, [pc, #408]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a65      	ldr	r2, [pc, #404]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 800241e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7fe fa2e 	bl	800088c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002434:	f7fe fa2a 	bl	800088c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e207      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b5b      	ldr	r3, [pc, #364]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0xc0>
 8002452:	e014      	b.n	800247e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7fe fa1a 	bl	800088c <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800245c:	f7fe fa16 	bl	800088c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e1f3      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246e:	4b51      	ldr	r3, [pc, #324]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0xe8>
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d063      	beq.n	8002552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800248a:	4b4a      	ldr	r3, [pc, #296]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00b      	beq.n	80024ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002496:	4b47      	ldr	r3, [pc, #284]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d11c      	bne.n	80024dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a2:	4b44      	ldr	r3, [pc, #272]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d116      	bne.n	80024dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ae:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_RCC_OscConfig+0x152>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e1c7      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4937      	ldr	r1, [pc, #220]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024da:	e03a      	b.n	8002552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e4:	4b34      	ldr	r3, [pc, #208]	; (80025b8 <HAL_RCC_OscConfig+0x244>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7fe f9cf 	bl	800088c <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f2:	f7fe f9cb 	bl	800088c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e1a8      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002504:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002510:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4925      	ldr	r1, [pc, #148]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002520:	4313      	orrs	r3, r2
 8002522:	600b      	str	r3, [r1, #0]
 8002524:	e015      	b.n	8002552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002526:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_RCC_OscConfig+0x244>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe f9ae 	bl	800088c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002534:	f7fe f9aa 	bl	800088c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e187      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002546:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d036      	beq.n	80025cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d016      	beq.n	8002594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002566:	4b15      	ldr	r3, [pc, #84]	; (80025bc <HAL_RCC_OscConfig+0x248>)
 8002568:	2201      	movs	r2, #1
 800256a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256c:	f7fe f98e 	bl	800088c <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002574:	f7fe f98a 	bl	800088c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e167      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x200>
 8002592:	e01b      	b.n	80025cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_RCC_OscConfig+0x248>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259a:	f7fe f977 	bl	800088c <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a0:	e00e      	b.n	80025c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a2:	f7fe f973 	bl	800088c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d907      	bls.n	80025c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e150      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
 80025b4:	40023800 	.word	0x40023800
 80025b8:	42470000 	.word	0x42470000
 80025bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c0:	4b88      	ldr	r3, [pc, #544]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80025c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1ea      	bne.n	80025a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8097 	beq.w	8002708 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025de:	4b81      	ldr	r3, [pc, #516]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10f      	bne.n	800260a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	4b7d      	ldr	r3, [pc, #500]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a7c      	ldr	r2, [pc, #496]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80025f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b7a      	ldr	r3, [pc, #488]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002606:	2301      	movs	r3, #1
 8002608:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260a:	4b77      	ldr	r3, [pc, #476]	; (80027e8 <HAL_RCC_OscConfig+0x474>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d118      	bne.n	8002648 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002616:	4b74      	ldr	r3, [pc, #464]	; (80027e8 <HAL_RCC_OscConfig+0x474>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a73      	ldr	r2, [pc, #460]	; (80027e8 <HAL_RCC_OscConfig+0x474>)
 800261c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002622:	f7fe f933 	bl	800088c <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262a:	f7fe f92f 	bl	800088c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e10c      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263c:	4b6a      	ldr	r3, [pc, #424]	; (80027e8 <HAL_RCC_OscConfig+0x474>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d106      	bne.n	800265e <HAL_RCC_OscConfig+0x2ea>
 8002650:	4b64      	ldr	r3, [pc, #400]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002654:	4a63      	ldr	r2, [pc, #396]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6713      	str	r3, [r2, #112]	; 0x70
 800265c:	e01c      	b.n	8002698 <HAL_RCC_OscConfig+0x324>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b05      	cmp	r3, #5
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x30c>
 8002666:	4b5f      	ldr	r3, [pc, #380]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266a:	4a5e      	ldr	r2, [pc, #376]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	6713      	str	r3, [r2, #112]	; 0x70
 8002672:	4b5c      	ldr	r3, [pc, #368]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	4a5b      	ldr	r2, [pc, #364]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6713      	str	r3, [r2, #112]	; 0x70
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0x324>
 8002680:	4b58      	ldr	r3, [pc, #352]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	4a57      	ldr	r2, [pc, #348]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	6713      	str	r3, [r2, #112]	; 0x70
 800268c:	4b55      	ldr	r3, [pc, #340]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	4a54      	ldr	r2, [pc, #336]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002692:	f023 0304 	bic.w	r3, r3, #4
 8002696:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d015      	beq.n	80026cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7fe f8f4 	bl	800088c <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a6:	e00a      	b.n	80026be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a8:	f7fe f8f0 	bl	800088c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e0cb      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026be:	4b49      	ldr	r3, [pc, #292]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0ee      	beq.n	80026a8 <HAL_RCC_OscConfig+0x334>
 80026ca:	e014      	b.n	80026f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026cc:	f7fe f8de 	bl	800088c <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d4:	f7fe f8da 	bl	800088c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e0b5      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ea:	4b3e      	ldr	r3, [pc, #248]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1ee      	bne.n	80026d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d105      	bne.n	8002708 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fc:	4b39      	ldr	r3, [pc, #228]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	4a38      	ldr	r2, [pc, #224]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002706:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80a1 	beq.w	8002854 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002712:	4b34      	ldr	r3, [pc, #208]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b08      	cmp	r3, #8
 800271c:	d05c      	beq.n	80027d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d141      	bne.n	80027aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002726:	4b31      	ldr	r3, [pc, #196]	; (80027ec <HAL_RCC_OscConfig+0x478>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7fe f8ae 	bl	800088c <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002734:	f7fe f8aa 	bl	800088c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e087      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002746:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	019b      	lsls	r3, r3, #6
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	085b      	lsrs	r3, r3, #1
 800276a:	3b01      	subs	r3, #1
 800276c:	041b      	lsls	r3, r3, #16
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	061b      	lsls	r3, r3, #24
 8002776:	491b      	ldr	r1, [pc, #108]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002778:	4313      	orrs	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_RCC_OscConfig+0x478>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7fe f883 	bl	800088c <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278a:	f7fe f87f 	bl	800088c <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e05c      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x416>
 80027a8:	e054      	b.n	8002854 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <HAL_RCC_OscConfig+0x478>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7fe f86c 	bl	800088c <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b8:	f7fe f868 	bl	800088c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e045      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x444>
 80027d6:	e03d      	b.n	8002854 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e038      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40007000 	.word	0x40007000
 80027ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_RCC_OscConfig+0x4ec>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d028      	beq.n	8002850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002808:	429a      	cmp	r2, r3
 800280a:	d121      	bne.n	8002850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d11a      	bne.n	8002850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002820:	4013      	ands	r3, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002826:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002828:	4293      	cmp	r3, r2
 800282a:	d111      	bne.n	8002850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	085b      	lsrs	r3, r3, #1
 8002838:	3b01      	subs	r3, #1
 800283a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d107      	bne.n	8002850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800

08002864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0cc      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002878:	4b68      	ldr	r3, [pc, #416]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d90c      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b65      	ldr	r3, [pc, #404]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0b8      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d020      	beq.n	80028ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b8:	4b59      	ldr	r3, [pc, #356]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4a58      	ldr	r2, [pc, #352]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d0:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	4a52      	ldr	r2, [pc, #328]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028dc:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	494d      	ldr	r1, [pc, #308]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d044      	beq.n	8002984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d119      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e07f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d003      	beq.n	8002922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291e:	2b03      	cmp	r3, #3
 8002920:	d107      	bne.n	8002932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002922:	4b3f      	ldr	r3, [pc, #252]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e06f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002932:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e067      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002942:	4b37      	ldr	r3, [pc, #220]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f023 0203 	bic.w	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4934      	ldr	r1, [pc, #208]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	4313      	orrs	r3, r2
 8002952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002954:	f7fd ff9a 	bl	800088c <HAL_GetTick>
 8002958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295a:	e00a      	b.n	8002972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295c:	f7fd ff96 	bl	800088c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	; 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e04f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 020c 	and.w	r2, r3, #12
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	429a      	cmp	r2, r3
 8002982:	d1eb      	bne.n	800295c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002984:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d20c      	bcs.n	80029ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b22      	ldr	r3, [pc, #136]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e032      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4916      	ldr	r1, [pc, #88]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d009      	beq.n	80029ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	490e      	ldr	r1, [pc, #56]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ea:	f000 f821 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 80029ee:	4602      	mov	r2, r0
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	490a      	ldr	r1, [pc, #40]	; (8002a24 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	5ccb      	ldrb	r3, [r1, r3]
 80029fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002a02:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fefa 	bl	8000804 <HAL_InitTick>

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023c00 	.word	0x40023c00
 8002a20:	40023800 	.word	0x40023800
 8002a24:	08006f7c 	.word	0x08006f7c
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	20000004 	.word	0x20000004

08002a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a34:	b094      	sub	sp, #80	; 0x50
 8002a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a40:	2300      	movs	r3, #0
 8002a42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a48:	4b79      	ldr	r3, [pc, #484]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d00d      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x40>
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	f200 80e1 	bhi.w	8002c1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x34>
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d003      	beq.n	8002a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a62:	e0db      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a64:	4b73      	ldr	r3, [pc, #460]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a68:	e0db      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a6a:	4b73      	ldr	r3, [pc, #460]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a6e:	e0d8      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a70:	4b6f      	ldr	r3, [pc, #444]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a7a:	4b6d      	ldr	r3, [pc, #436]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d063      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a86:	4b6a      	ldr	r3, [pc, #424]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	099b      	lsrs	r3, r3, #6
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002aa2:	4622      	mov	r2, r4
 8002aa4:	462b      	mov	r3, r5
 8002aa6:	f04f 0000 	mov.w	r0, #0
 8002aaa:	f04f 0100 	mov.w	r1, #0
 8002aae:	0159      	lsls	r1, r3, #5
 8002ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ab4:	0150      	lsls	r0, r2, #5
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4621      	mov	r1, r4
 8002abc:	1a51      	subs	r1, r2, r1
 8002abe:	6139      	str	r1, [r7, #16]
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ad4:	4659      	mov	r1, fp
 8002ad6:	018b      	lsls	r3, r1, #6
 8002ad8:	4651      	mov	r1, sl
 8002ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ade:	4651      	mov	r1, sl
 8002ae0:	018a      	lsls	r2, r1, #6
 8002ae2:	4651      	mov	r1, sl
 8002ae4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ae8:	4659      	mov	r1, fp
 8002aea:	eb63 0901 	sbc.w	r9, r3, r1
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b02:	4690      	mov	r8, r2
 8002b04:	4699      	mov	r9, r3
 8002b06:	4623      	mov	r3, r4
 8002b08:	eb18 0303 	adds.w	r3, r8, r3
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	462b      	mov	r3, r5
 8002b10:	eb49 0303 	adc.w	r3, r9, r3
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b22:	4629      	mov	r1, r5
 8002b24:	024b      	lsls	r3, r1, #9
 8002b26:	4621      	mov	r1, r4
 8002b28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	024a      	lsls	r2, r1, #9
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b36:	2200      	movs	r2, #0
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b40:	f7fd fb42 	bl	80001c8 <__aeabi_uldivmod>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4613      	mov	r3, r2
 8002b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b4c:	e058      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4e:	4b38      	ldr	r3, [pc, #224]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	099b      	lsrs	r3, r3, #6
 8002b54:	2200      	movs	r2, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	4611      	mov	r1, r2
 8002b5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b5e:	623b      	str	r3, [r7, #32]
 8002b60:	2300      	movs	r3, #0
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
 8002b64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b68:	4642      	mov	r2, r8
 8002b6a:	464b      	mov	r3, r9
 8002b6c:	f04f 0000 	mov.w	r0, #0
 8002b70:	f04f 0100 	mov.w	r1, #0
 8002b74:	0159      	lsls	r1, r3, #5
 8002b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b7a:	0150      	lsls	r0, r2, #5
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4641      	mov	r1, r8
 8002b82:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b86:	4649      	mov	r1, r9
 8002b88:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ba0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ba4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	00eb      	lsls	r3, r5, #3
 8002bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bb6:	00e2      	lsls	r2, r4, #3
 8002bb8:	4614      	mov	r4, r2
 8002bba:	461d      	mov	r5, r3
 8002bbc:	4643      	mov	r3, r8
 8002bbe:	18e3      	adds	r3, r4, r3
 8002bc0:	603b      	str	r3, [r7, #0]
 8002bc2:	464b      	mov	r3, r9
 8002bc4:	eb45 0303 	adc.w	r3, r5, r3
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	028b      	lsls	r3, r1, #10
 8002bda:	4621      	mov	r1, r4
 8002bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be0:	4621      	mov	r1, r4
 8002be2:	028a      	lsls	r2, r1, #10
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bea:	2200      	movs	r2, #0
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	61fa      	str	r2, [r7, #28]
 8002bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf4:	f7fd fae8 	bl	80001c8 <__aeabi_uldivmod>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c1a:	e002      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3750      	adds	r7, #80	; 0x50
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800
 8002c34:	00f42400 	.word	0x00f42400
 8002c38:	007a1200 	.word	0x007a1200

08002c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000000 	.word	0x20000000

08002c54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c54:	b084      	sub	sp, #16
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	f107 001c 	add.w	r0, r7, #28
 8002c62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d122      	bne.n	8002cb2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d105      	bne.n	8002ca6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f001 fbee 	bl	8004488 <USB_CoreReset>
 8002cac:	4603      	mov	r3, r0
 8002cae:	73fb      	strb	r3, [r7, #15]
 8002cb0:	e01a      	b.n	8002ce8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f001 fbe2 	bl	8004488 <USB_CoreReset>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38
 8002cda:	e005      	b.n	8002ce8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d10b      	bne.n	8002d06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f043 0206 	orr.w	r2, r3, #6
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f043 0220 	orr.w	r2, r3, #32
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d12:	b004      	add	sp, #16
 8002d14:	4770      	bx	lr
	...

08002d18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	4613      	mov	r3, r2
 8002d24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d165      	bne.n	8002df8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4a41      	ldr	r2, [pc, #260]	; (8002e34 <USB_SetTurnaroundTime+0x11c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d906      	bls.n	8002d42 <USB_SetTurnaroundTime+0x2a>
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	4a40      	ldr	r2, [pc, #256]	; (8002e38 <USB_SetTurnaroundTime+0x120>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d202      	bcs.n	8002d42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d3c:	230f      	movs	r3, #15
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	e062      	b.n	8002e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	4a3c      	ldr	r2, [pc, #240]	; (8002e38 <USB_SetTurnaroundTime+0x120>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d306      	bcc.n	8002d58 <USB_SetTurnaroundTime+0x40>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	4a3b      	ldr	r2, [pc, #236]	; (8002e3c <USB_SetTurnaroundTime+0x124>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d202      	bcs.n	8002d58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002d52:	230e      	movs	r3, #14
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	e057      	b.n	8002e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4a38      	ldr	r2, [pc, #224]	; (8002e3c <USB_SetTurnaroundTime+0x124>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d306      	bcc.n	8002d6e <USB_SetTurnaroundTime+0x56>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4a37      	ldr	r2, [pc, #220]	; (8002e40 <USB_SetTurnaroundTime+0x128>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d202      	bcs.n	8002d6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d68:	230d      	movs	r3, #13
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	e04c      	b.n	8002e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	4a33      	ldr	r2, [pc, #204]	; (8002e40 <USB_SetTurnaroundTime+0x128>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d306      	bcc.n	8002d84 <USB_SetTurnaroundTime+0x6c>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	4a32      	ldr	r2, [pc, #200]	; (8002e44 <USB_SetTurnaroundTime+0x12c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d802      	bhi.n	8002d84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d7e:	230c      	movs	r3, #12
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	e041      	b.n	8002e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4a2f      	ldr	r2, [pc, #188]	; (8002e44 <USB_SetTurnaroundTime+0x12c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d906      	bls.n	8002d9a <USB_SetTurnaroundTime+0x82>
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4a2e      	ldr	r2, [pc, #184]	; (8002e48 <USB_SetTurnaroundTime+0x130>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d802      	bhi.n	8002d9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d94:	230b      	movs	r3, #11
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	e036      	b.n	8002e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4a2a      	ldr	r2, [pc, #168]	; (8002e48 <USB_SetTurnaroundTime+0x130>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d906      	bls.n	8002db0 <USB_SetTurnaroundTime+0x98>
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4a29      	ldr	r2, [pc, #164]	; (8002e4c <USB_SetTurnaroundTime+0x134>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d802      	bhi.n	8002db0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002daa:	230a      	movs	r3, #10
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	e02b      	b.n	8002e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4a26      	ldr	r2, [pc, #152]	; (8002e4c <USB_SetTurnaroundTime+0x134>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d906      	bls.n	8002dc6 <USB_SetTurnaroundTime+0xae>
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4a25      	ldr	r2, [pc, #148]	; (8002e50 <USB_SetTurnaroundTime+0x138>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d202      	bcs.n	8002dc6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002dc0:	2309      	movs	r3, #9
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e020      	b.n	8002e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4a21      	ldr	r2, [pc, #132]	; (8002e50 <USB_SetTurnaroundTime+0x138>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d306      	bcc.n	8002ddc <USB_SetTurnaroundTime+0xc4>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4a20      	ldr	r2, [pc, #128]	; (8002e54 <USB_SetTurnaroundTime+0x13c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d802      	bhi.n	8002ddc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	e015      	b.n	8002e08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4a1d      	ldr	r2, [pc, #116]	; (8002e54 <USB_SetTurnaroundTime+0x13c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d906      	bls.n	8002df2 <USB_SetTurnaroundTime+0xda>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4a1c      	ldr	r2, [pc, #112]	; (8002e58 <USB_SetTurnaroundTime+0x140>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d202      	bcs.n	8002df2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002dec:	2307      	movs	r3, #7
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e00a      	b.n	8002e08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002df2:	2306      	movs	r3, #6
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	e007      	b.n	8002e08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d102      	bne.n	8002e04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002dfe:	2309      	movs	r3, #9
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	e001      	b.n	8002e08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e04:	2309      	movs	r3, #9
 8002e06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	029b      	lsls	r3, r3, #10
 8002e1c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002e20:	431a      	orrs	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	00d8acbf 	.word	0x00d8acbf
 8002e38:	00e4e1c0 	.word	0x00e4e1c0
 8002e3c:	00f42400 	.word	0x00f42400
 8002e40:	01067380 	.word	0x01067380
 8002e44:	011a499f 	.word	0x011a499f
 8002e48:	01312cff 	.word	0x01312cff
 8002e4c:	014ca43f 	.word	0x014ca43f
 8002e50:	016e3600 	.word	0x016e3600
 8002e54:	01a6ab1f 	.word	0x01a6ab1f
 8002e58:	01e84800 	.word	0x01e84800

08002e5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f043 0201 	orr.w	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f023 0201 	bic.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d115      	bne.n	8002eee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002ece:	2001      	movs	r0, #1
 8002ed0:	f7fd fce8 	bl	80008a4 <HAL_Delay>
      ms++;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f001 fa45 	bl	800436a <USB_GetMode>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d01e      	beq.n	8002f24 <USB_SetCurrentMode+0x84>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b31      	cmp	r3, #49	; 0x31
 8002eea:	d9f0      	bls.n	8002ece <USB_SetCurrentMode+0x2e>
 8002eec:	e01a      	b.n	8002f24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d115      	bne.n	8002f20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f00:	2001      	movs	r0, #1
 8002f02:	f7fd fccf 	bl	80008a4 <HAL_Delay>
      ms++;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f001 fa2c 	bl	800436a <USB_GetMode>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <USB_SetCurrentMode+0x84>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b31      	cmp	r3, #49	; 0x31
 8002f1c:	d9f0      	bls.n	8002f00 <USB_SetCurrentMode+0x60>
 8002f1e:	e001      	b.n	8002f24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e005      	b.n	8002f30 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b32      	cmp	r3, #50	; 0x32
 8002f28:	d101      	bne.n	8002f2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f38:	b084      	sub	sp, #16
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	e009      	b.n	8002f6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	3340      	adds	r3, #64	; 0x40
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	2200      	movs	r2, #0
 8002f64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2b0e      	cmp	r3, #14
 8002f70:	d9f2      	bls.n	8002f58 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d11c      	bne.n	8002fb2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f86:	f043 0302 	orr.w	r3, r3, #2
 8002f8a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	639a      	str	r2, [r3, #56]	; 0x38
 8002fb0:	e00b      	b.n	8002fca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fdc:	4619      	mov	r1, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	680b      	ldr	r3, [r1, #0]
 8002fe8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d10c      	bne.n	800300a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d104      	bne.n	8003000 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f965 	bl	80032c8 <USB_SetDevSpeed>
 8002ffe:	e008      	b.n	8003012 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003000:	2101      	movs	r1, #1
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f960 	bl	80032c8 <USB_SetDevSpeed>
 8003008:	e003      	b.n	8003012 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800300a:	2103      	movs	r1, #3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f95b 	bl	80032c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003012:	2110      	movs	r1, #16
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f8f3 	bl	8003200 <USB_FlushTxFifo>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f91f 	bl	8003268 <USB_FlushRxFifo>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800303a:	461a      	mov	r2, r3
 800303c:	2300      	movs	r3, #0
 800303e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003046:	461a      	mov	r2, r3
 8003048:	2300      	movs	r3, #0
 800304a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003052:	461a      	mov	r2, r3
 8003054:	2300      	movs	r3, #0
 8003056:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003058:	2300      	movs	r3, #0
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	e043      	b.n	80030e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4413      	add	r3, r2
 8003066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003074:	d118      	bne.n	80030a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10a      	bne.n	8003092 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003088:	461a      	mov	r2, r3
 800308a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	e013      	b.n	80030ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4413      	add	r3, r2
 800309a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800309e:	461a      	mov	r2, r3
 80030a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	e008      	b.n	80030ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b4:	461a      	mov	r2, r3
 80030b6:	2300      	movs	r3, #0
 80030b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c6:	461a      	mov	r2, r3
 80030c8:	2300      	movs	r3, #0
 80030ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d8:	461a      	mov	r2, r3
 80030da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	3301      	adds	r3, #1
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d3b7      	bcc.n	800305e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	e043      	b.n	800317c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800310a:	d118      	bne.n	800313e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4413      	add	r3, r2
 800311a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311e:	461a      	mov	r2, r3
 8003120:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e013      	b.n	8003150 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003134:	461a      	mov	r2, r3
 8003136:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	e008      	b.n	8003150 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314a:	461a      	mov	r2, r3
 800314c:	2300      	movs	r3, #0
 800314e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800315c:	461a      	mov	r2, r3
 800315e:	2300      	movs	r3, #0
 8003160:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4413      	add	r3, r2
 800316a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316e:	461a      	mov	r2, r3
 8003170:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003174:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	3301      	adds	r3, #1
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	429a      	cmp	r2, r3
 8003182:	d3b7      	bcc.n	80030f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003192:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003196:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80031a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80031a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d105      	bne.n	80031b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f043 0210 	orr.w	r2, r3, #16
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699a      	ldr	r2, [r3, #24]
 80031bc:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <USB_DevInit+0x2c4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80031c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	f043 0208 	orr.w	r2, r3, #8
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80031d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d107      	bne.n	80031ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031e4:	f043 0304 	orr.w	r3, r3, #4
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80031ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031f8:	b004      	add	sp, #16
 80031fa:	4770      	bx	lr
 80031fc:	803c3800 	.word	0x803c3800

08003200 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3301      	adds	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a13      	ldr	r2, [pc, #76]	; (8003264 <USB_FlushTxFifo+0x64>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d901      	bls.n	8003220 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e01b      	b.n	8003258 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	daf2      	bge.n	800320e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	019b      	lsls	r3, r3, #6
 8003230:	f043 0220 	orr.w	r2, r3, #32
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3301      	adds	r3, #1
 800323c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4a08      	ldr	r2, [pc, #32]	; (8003264 <USB_FlushTxFifo+0x64>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e006      	b.n	8003258 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b20      	cmp	r3, #32
 8003254:	d0f0      	beq.n	8003238 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	00030d40 	.word	0x00030d40

08003268 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3301      	adds	r3, #1
 8003278:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4a11      	ldr	r2, [pc, #68]	; (80032c4 <USB_FlushRxFifo+0x5c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e018      	b.n	80032b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	2b00      	cmp	r3, #0
 800328c:	daf2      	bge.n	8003274 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2210      	movs	r2, #16
 8003296:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	3301      	adds	r3, #1
 800329c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4a08      	ldr	r2, [pc, #32]	; (80032c4 <USB_FlushRxFifo+0x5c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e006      	b.n	80032b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b10      	cmp	r3, #16
 80032b4:	d0f0      	beq.n	8003298 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	00030d40 	.word	0x00030d40

080032c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	68f9      	ldr	r1, [r7, #12]
 80032e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032e8:	4313      	orrs	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b087      	sub	sp, #28
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0306 	and.w	r3, r3, #6
 8003312:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d102      	bne.n	8003320 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800331a:	2300      	movs	r3, #0
 800331c:	75fb      	strb	r3, [r7, #23]
 800331e:	e00a      	b.n	8003336 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d002      	beq.n	800332c <USB_GetDevSpeed+0x32>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b06      	cmp	r3, #6
 800332a:	d102      	bne.n	8003332 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800332c:	2302      	movs	r3, #2
 800332e:	75fb      	strb	r3, [r7, #23]
 8003330:	e001      	b.n	8003336 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003332:	230f      	movs	r3, #15
 8003334:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003336:	7dfb      	ldrb	r3, [r7, #23]
}
 8003338:	4618      	mov	r0, r3
 800333a:	371c      	adds	r7, #28
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	785b      	ldrb	r3, [r3, #1]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d13a      	bne.n	80033d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003366:	69da      	ldr	r2, [r3, #28]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	2101      	movs	r1, #1
 8003372:	fa01 f303 	lsl.w	r3, r1, r3
 8003376:	b29b      	uxth	r3, r3
 8003378:	68f9      	ldr	r1, [r7, #12]
 800337a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800337e:	4313      	orrs	r3, r2
 8003380:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d155      	bne.n	8003444 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	791b      	ldrb	r3, [r3, #4]
 80033b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	059b      	lsls	r3, r3, #22
 80033ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033bc:	4313      	orrs	r3, r2
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	0151      	lsls	r1, r2, #5
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	440a      	add	r2, r1
 80033c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	e036      	b.n	8003444 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033dc:	69da      	ldr	r2, [r3, #28]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	2101      	movs	r1, #1
 80033e8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	68f9      	ldr	r1, [r7, #12]
 80033f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d11a      	bne.n	8003444 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	791b      	ldrb	r3, [r3, #4]
 8003428:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800342a:	430b      	orrs	r3, r1
 800342c:	4313      	orrs	r3, r2
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	0151      	lsls	r1, r2, #5
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	440a      	add	r2, r1
 8003436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800343a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003442:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	785b      	ldrb	r3, [r3, #1]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d161      	bne.n	8003534 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003486:	d11f      	bne.n	80034c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	0151      	lsls	r1, r2, #5
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	440a      	add	r2, r1
 800349e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	0151      	lsls	r1, r2, #5
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	440a      	add	r2, r1
 80034be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	2101      	movs	r1, #1
 80034da:	fa01 f303 	lsl.w	r3, r1, r3
 80034de:	b29b      	uxth	r3, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	68f9      	ldr	r1, [r7, #12]
 80034e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034e8:	4013      	ands	r3, r2
 80034ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	2101      	movs	r1, #1
 80034fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003502:	b29b      	uxth	r3, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	68f9      	ldr	r1, [r7, #12]
 8003508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800350c:	4013      	ands	r3, r2
 800350e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4413      	add	r3, r2
 8003518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	0159      	lsls	r1, r3, #5
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	440b      	add	r3, r1
 8003526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352a:	4619      	mov	r1, r3
 800352c:	4b35      	ldr	r3, [pc, #212]	; (8003604 <USB_DeactivateEndpoint+0x1b0>)
 800352e:	4013      	ands	r3, r2
 8003530:	600b      	str	r3, [r1, #0]
 8003532:	e060      	b.n	80035f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800354a:	d11f      	bne.n	800358c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	0151      	lsls	r1, r2, #5
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	440a      	add	r2, r1
 8003562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003566:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800356a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4413      	add	r3, r2
 8003574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	0151      	lsls	r1, r2, #5
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	440a      	add	r2, r1
 8003582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003586:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800358a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003592:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	2101      	movs	r1, #1
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	041b      	lsls	r3, r3, #16
 80035a4:	43db      	mvns	r3, r3
 80035a6:	68f9      	ldr	r1, [r7, #12]
 80035a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035ac:	4013      	ands	r3, r2
 80035ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	f003 030f 	and.w	r3, r3, #15
 80035c0:	2101      	movs	r1, #1
 80035c2:	fa01 f303 	lsl.w	r3, r1, r3
 80035c6:	041b      	lsls	r3, r3, #16
 80035c8:	43db      	mvns	r3, r3
 80035ca:	68f9      	ldr	r1, [r7, #12]
 80035cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035d0:	4013      	ands	r3, r2
 80035d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	0159      	lsls	r1, r3, #5
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	440b      	add	r3, r1
 80035ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ee:	4619      	mov	r1, r3
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <USB_DeactivateEndpoint+0x1b4>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	ec337800 	.word	0xec337800
 8003608:	eff37800 	.word	0xeff37800

0800360c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	; 0x28
 8003610:	af02      	add	r7, sp, #8
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	4613      	mov	r3, r2
 8003618:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	785b      	ldrb	r3, [r3, #1]
 8003628:	2b01      	cmp	r3, #1
 800362a:	f040 815c 	bne.w	80038e6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d132      	bne.n	800369c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	0151      	lsls	r1, r2, #5
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	440a      	add	r2, r1
 800364c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003650:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003654:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003658:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	0151      	lsls	r1, r2, #5
 800366c:	69fa      	ldr	r2, [r7, #28]
 800366e:	440a      	add	r2, r1
 8003670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003674:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003678:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	0151      	lsls	r1, r2, #5
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	440a      	add	r2, r1
 8003690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003694:	0cdb      	lsrs	r3, r3, #19
 8003696:	04db      	lsls	r3, r3, #19
 8003698:	6113      	str	r3, [r2, #16]
 800369a:	e074      	b.n	8003786 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	0151      	lsls	r1, r2, #5
 80036ae:	69fa      	ldr	r2, [r7, #28]
 80036b0:	440a      	add	r2, r1
 80036b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036b6:	0cdb      	lsrs	r3, r3, #19
 80036b8:	04db      	lsls	r3, r3, #19
 80036ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	0151      	lsls	r1, r2, #5
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	440a      	add	r2, r1
 80036d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	6999      	ldr	r1, [r3, #24]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	440b      	add	r3, r1
 80036f8:	1e59      	subs	r1, r3, #1
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003702:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003704:	4b9d      	ldr	r3, [pc, #628]	; (800397c <USB_EPStartXfer+0x370>)
 8003706:	400b      	ands	r3, r1
 8003708:	69b9      	ldr	r1, [r7, #24]
 800370a:	0148      	lsls	r0, r1, #5
 800370c:	69f9      	ldr	r1, [r7, #28]
 800370e:	4401      	add	r1, r0
 8003710:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003714:	4313      	orrs	r3, r2
 8003716:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372e:	69b9      	ldr	r1, [r7, #24]
 8003730:	0148      	lsls	r0, r1, #5
 8003732:	69f9      	ldr	r1, [r7, #28]
 8003734:	4401      	add	r1, r0
 8003736:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800373a:	4313      	orrs	r3, r2
 800373c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	791b      	ldrb	r3, [r3, #4]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d11f      	bne.n	8003786 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	440a      	add	r2, r1
 800375c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003760:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003764:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	0151      	lsls	r1, r2, #5
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	440a      	add	r2, r1
 800377c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003780:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003784:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d14b      	bne.n	8003824 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d009      	beq.n	80037a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	4413      	add	r3, r2
 800379c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a0:	461a      	mov	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	791b      	ldrb	r3, [r3, #4]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d128      	bne.n	8003802 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d110      	bne.n	80037e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	0151      	lsls	r1, r2, #5
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	440a      	add	r2, r1
 80037d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	e00f      	b.n	8003802 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	0151      	lsls	r1, r2, #5
 80037f4:	69fa      	ldr	r2, [r7, #28]
 80037f6:	440a      	add	r2, r1
 80037f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003800:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	4413      	add	r3, r2
 800380a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	0151      	lsls	r1, r2, #5
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	440a      	add	r2, r1
 8003818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800381c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	e133      	b.n	8003a8c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	0151      	lsls	r1, r2, #5
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	440a      	add	r2, r1
 800383a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800383e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003842:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	791b      	ldrb	r3, [r3, #4]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d015      	beq.n	8003878 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 811b 	beq.w	8003a8c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	2101      	movs	r1, #1
 8003868:	fa01 f303 	lsl.w	r3, r1, r3
 800386c:	69f9      	ldr	r1, [r7, #28]
 800386e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003872:	4313      	orrs	r3, r2
 8003874:	634b      	str	r3, [r1, #52]	; 0x34
 8003876:	e109      	b.n	8003a8c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003884:	2b00      	cmp	r3, #0
 8003886:	d110      	bne.n	80038aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	0151      	lsls	r1, r2, #5
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	440a      	add	r2, r1
 800389e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e00f      	b.n	80038ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	0151      	lsls	r1, r2, #5
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	440a      	add	r2, r1
 80038c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	6919      	ldr	r1, [r3, #16]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	781a      	ldrb	r2, [r3, #0]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	b298      	uxth	r0, r3
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	4603      	mov	r3, r0
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fade 	bl	8003ea0 <USB_WritePacket>
 80038e4:	e0d2      	b.n	8003a8c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	0151      	lsls	r1, r2, #5
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	440a      	add	r2, r1
 80038fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003900:	0cdb      	lsrs	r3, r3, #19
 8003902:	04db      	lsls	r3, r3, #19
 8003904:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	015a      	lsls	r2, r3, #5
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	0151      	lsls	r1, r2, #5
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	440a      	add	r2, r1
 800391c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003920:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003924:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003928:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d126      	bne.n	8003980 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003948:	69b9      	ldr	r1, [r7, #24]
 800394a:	0148      	lsls	r0, r1, #5
 800394c:	69f9      	ldr	r1, [r7, #28]
 800394e:	4401      	add	r1, r0
 8003950:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003954:	4313      	orrs	r3, r2
 8003956:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	0151      	lsls	r1, r2, #5
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	440a      	add	r2, r1
 800396e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003972:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003976:	6113      	str	r3, [r2, #16]
 8003978:	e03a      	b.n	80039f0 <USB_EPStartXfer+0x3e4>
 800397a:	bf00      	nop
 800397c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4413      	add	r3, r2
 800398a:	1e5a      	subs	r2, r3, #1
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	fbb2 f3f3 	udiv	r3, r2, r3
 8003994:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	8afa      	ldrh	r2, [r7, #22]
 800399c:	fb03 f202 	mul.w	r2, r3, r2
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	8afb      	ldrh	r3, [r7, #22]
 80039b4:	04d9      	lsls	r1, r3, #19
 80039b6:	4b38      	ldr	r3, [pc, #224]	; (8003a98 <USB_EPStartXfer+0x48c>)
 80039b8:	400b      	ands	r3, r1
 80039ba:	69b9      	ldr	r1, [r7, #24]
 80039bc:	0148      	lsls	r0, r1, #5
 80039be:	69f9      	ldr	r1, [r7, #28]
 80039c0:	4401      	add	r1, r0
 80039c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039c6:	4313      	orrs	r3, r2
 80039c8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d6:	691a      	ldr	r2, [r3, #16]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e0:	69b9      	ldr	r1, [r7, #24]
 80039e2:	0148      	lsls	r0, r1, #5
 80039e4:	69f9      	ldr	r1, [r7, #28]
 80039e6:	4401      	add	r1, r0
 80039e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039ec:	4313      	orrs	r3, r2
 80039ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d10d      	bne.n	8003a12 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	6919      	ldr	r1, [r3, #16]
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0e:	460a      	mov	r2, r1
 8003a10:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	791b      	ldrb	r3, [r3, #4]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d128      	bne.n	8003a6c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d110      	bne.n	8003a4c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	0151      	lsls	r1, r2, #5
 8003a3c:	69fa      	ldr	r2, [r7, #28]
 8003a3e:	440a      	add	r2, r1
 8003a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e00f      	b.n	8003a6c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	0151      	lsls	r1, r2, #5
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	440a      	add	r2, r1
 8003a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	0151      	lsls	r1, r2, #5
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	440a      	add	r2, r1
 8003a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3720      	adds	r7, #32
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	1ff80000 	.word	0x1ff80000

08003a9c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	785b      	ldrb	r3, [r3, #1]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	f040 80ce 	bne.w	8003c5a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d132      	bne.n	8003b2c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	0151      	lsls	r1, r2, #5
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	440a      	add	r2, r1
 8003adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ae0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ae4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ae8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	0151      	lsls	r1, r2, #5
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	440a      	add	r2, r1
 8003b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	0151      	lsls	r1, r2, #5
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	440a      	add	r2, r1
 8003b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b24:	0cdb      	lsrs	r3, r3, #19
 8003b26:	04db      	lsls	r3, r3, #19
 8003b28:	6113      	str	r3, [r2, #16]
 8003b2a:	e04e      	b.n	8003bca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	0151      	lsls	r1, r2, #5
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	440a      	add	r2, r1
 8003b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b46:	0cdb      	lsrs	r3, r3, #19
 8003b48:	04db      	lsls	r3, r3, #19
 8003b4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	0151      	lsls	r1, r2, #5
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	440a      	add	r2, r1
 8003b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b6e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	699a      	ldr	r2, [r3, #24]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d903      	bls.n	8003b84 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	0151      	lsls	r1, r2, #5
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	440a      	add	r2, r1
 8003b9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ba2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bba:	6939      	ldr	r1, [r7, #16]
 8003bbc:	0148      	lsls	r0, r1, #5
 8003bbe:	6979      	ldr	r1, [r7, #20]
 8003bc0:	4401      	add	r1, r0
 8003bc2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d11e      	bne.n	8003c0e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d009      	beq.n	8003bec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be4:	461a      	mov	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	0151      	lsls	r1, r2, #5
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	440a      	add	r2, r1
 8003c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	e097      	b.n	8003d3e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	0151      	lsls	r1, r2, #5
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	440a      	add	r2, r1
 8003c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c2c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8083 	beq.w	8003d3e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	2101      	movs	r1, #1
 8003c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4e:	6979      	ldr	r1, [r7, #20]
 8003c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c54:	4313      	orrs	r3, r2
 8003c56:	634b      	str	r3, [r1, #52]	; 0x34
 8003c58:	e071      	b.n	8003d3e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	0151      	lsls	r1, r2, #5
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	440a      	add	r2, r1
 8003c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c74:	0cdb      	lsrs	r3, r3, #19
 8003c76:	04db      	lsls	r3, r3, #19
 8003c78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	015a      	lsls	r2, r3, #5
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	0151      	lsls	r1, r2, #5
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	440a      	add	r2, r1
 8003c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	0151      	lsls	r1, r2, #5
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	440a      	add	r2, r1
 8003ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cec:	6939      	ldr	r1, [r7, #16]
 8003cee:	0148      	lsls	r0, r1, #5
 8003cf0:	6979      	ldr	r1, [r7, #20]
 8003cf2:	4401      	add	r1, r0
 8003cf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d10d      	bne.n	8003d1e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	6919      	ldr	r1, [r3, #16]
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1a:	460a      	mov	r2, r1
 8003d1c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	0151      	lsls	r1, r2, #5
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	440a      	add	r2, r1
 8003d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	785b      	ldrb	r3, [r3, #1]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d14a      	bne.n	8003e00 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d82:	f040 8086 	bne.w	8003e92 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	7812      	ldrb	r2, [r2, #0]
 8003d9a:	0151      	lsls	r1, r2, #5
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	440a      	add	r2, r1
 8003da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003da4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003da8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	7812      	ldrb	r2, [r2, #0]
 8003dbe:	0151      	lsls	r1, r2, #5
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	440a      	add	r2, r1
 8003dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dcc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d902      	bls.n	8003de4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
          break;
 8003de2:	e056      	b.n	8003e92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003df8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dfc:	d0e7      	beq.n	8003dce <USB_EPStopXfer+0x82>
 8003dfe:	e048      	b.n	8003e92 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e18:	d13b      	bne.n	8003e92 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	7812      	ldrb	r2, [r2, #0]
 8003e2e:	0151      	lsls	r1, r2, #5
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	440a      	add	r2, r1
 8003e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e3c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	7812      	ldrb	r2, [r2, #0]
 8003e52:	0151      	lsls	r1, r2, #5
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	440a      	add	r2, r1
 8003e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3301      	adds	r3, #1
 8003e66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d902      	bls.n	8003e78 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	75fb      	strb	r3, [r7, #23]
          break;
 8003e76:	e00c      	b.n	8003e92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	015a      	lsls	r2, r3, #5
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4413      	add	r3, r2
 8003e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e90:	d0e7      	beq.n	8003e62 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	; 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	4611      	mov	r1, r2
 8003eac:	461a      	mov	r2, r3
 8003eae:	460b      	mov	r3, r1
 8003eb0:	71fb      	strb	r3, [r7, #7]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003ebe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d123      	bne.n	8003f0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ec6:	88bb      	ldrh	r3, [r7, #4]
 8003ec8:	3303      	adds	r3, #3
 8003eca:	089b      	lsrs	r3, r3, #2
 8003ecc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	e018      	b.n	8003f06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	031a      	lsls	r2, r3, #12
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	3301      	adds	r3, #1
 8003eec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3301      	adds	r3, #1
 8003efe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	3301      	adds	r3, #1
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d3e2      	bcc.n	8003ed4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3724      	adds	r7, #36	; 0x24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b08b      	sub	sp, #44	; 0x2c
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	4613      	mov	r3, r2
 8003f28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	089b      	lsrs	r3, r3, #2
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f42:	2300      	movs	r3, #0
 8003f44:	623b      	str	r3, [r7, #32]
 8003f46:	e014      	b.n	8003f72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	3301      	adds	r3, #1
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	3301      	adds	r3, #1
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	3301      	adds	r3, #1
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	623b      	str	r3, [r7, #32]
 8003f72:	6a3a      	ldr	r2, [r7, #32]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d3e6      	bcc.n	8003f48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003f7a:	8bfb      	ldrh	r3, [r7, #30]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01e      	beq.n	8003fbe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f107 0310 	add.w	r3, r7, #16
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	701a      	strb	r2, [r3, #0]
      i++;
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	623b      	str	r3, [r7, #32]
      pDest++;
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	3301      	adds	r3, #1
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003fb2:	8bfb      	ldrh	r3, [r7, #30]
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003fb8:	8bfb      	ldrh	r3, [r7, #30]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1ea      	bne.n	8003f94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	372c      	adds	r7, #44	; 0x2c
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	785b      	ldrb	r3, [r3, #1]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d12c      	bne.n	8004042 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	db12      	blt.n	8004020 <USB_EPSetStall+0x54>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00f      	beq.n	8004020 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	0151      	lsls	r1, r2, #5
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	440a      	add	r2, r1
 8004016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800401e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	0151      	lsls	r1, r2, #5
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	440a      	add	r2, r1
 8004036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800403a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	e02b      	b.n	800409a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	db12      	blt.n	800407a <USB_EPSetStall+0xae>
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00f      	beq.n	800407a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	0151      	lsls	r1, r2, #5
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	440a      	add	r2, r1
 8004070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004074:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004078:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	0151      	lsls	r1, r2, #5
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	440a      	add	r2, r1
 8004090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004094:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004098:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3714      	adds	r7, #20
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	785b      	ldrb	r3, [r3, #1]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d128      	bne.n	8004116 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	0151      	lsls	r1, r2, #5
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	440a      	add	r2, r1
 80040da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	791b      	ldrb	r3, [r3, #4]
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d003      	beq.n	80040f4 <USB_EPClearStall+0x4c>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	791b      	ldrb	r3, [r3, #4]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d138      	bne.n	8004166 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	440a      	add	r2, r1
 800410a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	e027      	b.n	8004166 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	0151      	lsls	r1, r2, #5
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	440a      	add	r2, r1
 800412c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004130:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004134:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	791b      	ldrb	r3, [r3, #4]
 800413a:	2b03      	cmp	r3, #3
 800413c:	d003      	beq.n	8004146 <USB_EPClearStall+0x9e>
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	791b      	ldrb	r3, [r3, #4]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d10f      	bne.n	8004166 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	0151      	lsls	r1, r2, #5
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	440a      	add	r2, r1
 800415c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004164:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004192:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004196:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80041a8:	68f9      	ldr	r1, [r7, #12]
 80041aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041ae:	4313      	orrs	r3, r2
 80041b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041da:	f023 0303 	bic.w	r3, r3, #3
 80041de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ee:	f023 0302 	bic.w	r3, r3, #2
 80041f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004202:	b480      	push	{r7}
 8004204:	b085      	sub	sp, #20
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800421c:	f023 0303 	bic.w	r3, r3, #3
 8004220:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004230:	f043 0302 	orr.w	r3, r3, #2
 8004234:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4013      	ands	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800425c:	68fb      	ldr	r3, [r7, #12]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800426a:	b480      	push	{r7}
 800426c:	b085      	sub	sp, #20
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	4013      	ands	r3, r2
 800428c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	0c1b      	lsrs	r3, r3, #16
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	4013      	ands	r3, r2
 80042c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	b29b      	uxth	r3, r3
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	460b      	mov	r3, r1
 80042dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	4013      	ands	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004300:	68bb      	ldr	r3, [r7, #8]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800430e:	b480      	push	{r7}
 8004310:	b087      	sub	sp, #28
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	460b      	mov	r3, r1
 8004318:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004330:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	fa22 f303 	lsr.w	r3, r2, r3
 800433e:	01db      	lsls	r3, r3, #7
 8004340:	b2db      	uxtb	r3, r3
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4013      	ands	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800435c:	68bb      	ldr	r3, [r7, #8]
}
 800435e:	4618      	mov	r0, r3
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f003 0301 	and.w	r3, r3, #1
}
 800437a:	4618      	mov	r0, r3
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004386:	b480      	push	{r7}
 8004388:	b085      	sub	sp, #20
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80043a4:	f023 0307 	bic.w	r3, r3, #7
 80043a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	460b      	mov	r3, r1
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	333c      	adds	r3, #60	; 0x3c
 80043e2:	3304      	adds	r3, #4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4a26      	ldr	r2, [pc, #152]	; (8004484 <USB_EP0_OutStart+0xb8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d90a      	bls.n	8004406 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004400:	d101      	bne.n	8004406 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	e037      	b.n	8004476 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440c:	461a      	mov	r2, r3
 800440e:	2300      	movs	r3, #0
 8004410:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004420:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004424:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004434:	f043 0318 	orr.w	r3, r3, #24
 8004438:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004448:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800444c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800444e:	7afb      	ldrb	r3, [r7, #11]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d10f      	bne.n	8004474 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445a:	461a      	mov	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800446e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004472:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	4f54300a 	.word	0x4f54300a

08004488 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3301      	adds	r3, #1
 8004498:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4a13      	ldr	r2, [pc, #76]	; (80044ec <USB_CoreReset+0x64>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d901      	bls.n	80044a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e01b      	b.n	80044de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	daf2      	bge.n	8004494 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f043 0201 	orr.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3301      	adds	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a09      	ldr	r2, [pc, #36]	; (80044ec <USB_CoreReset+0x64>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d901      	bls.n	80044d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e006      	b.n	80044de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d0f0      	beq.n	80044be <USB_CoreReset+0x36>

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	00030d40 	.word	0x00030d40

080044f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80044fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004500:	f002 fc94 	bl	8006e2c <USBD_static_malloc>
 8004504:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d109      	bne.n	8004520 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	32b0      	adds	r2, #176	; 0xb0
 8004516:	2100      	movs	r1, #0
 8004518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800451c:	2302      	movs	r3, #2
 800451e:	e0d4      	b.n	80046ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004520:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004524:	2100      	movs	r1, #0
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f002 fce8 	bl	8006efc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	32b0      	adds	r2, #176	; 0xb0
 8004536:	68f9      	ldr	r1, [r7, #12]
 8004538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	32b0      	adds	r2, #176	; 0xb0
 8004546:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	7c1b      	ldrb	r3, [r3, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d138      	bne.n	80045ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004558:	4b5e      	ldr	r3, [pc, #376]	; (80046d4 <USBD_CDC_Init+0x1e4>)
 800455a:	7819      	ldrb	r1, [r3, #0]
 800455c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004560:	2202      	movs	r2, #2
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f002 fb3f 	bl	8006be6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004568:	4b5a      	ldr	r3, [pc, #360]	; (80046d4 <USBD_CDC_Init+0x1e4>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	f003 020f 	and.w	r2, r3, #15
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	3324      	adds	r3, #36	; 0x24
 800457e:	2201      	movs	r2, #1
 8004580:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004582:	4b55      	ldr	r3, [pc, #340]	; (80046d8 <USBD_CDC_Init+0x1e8>)
 8004584:	7819      	ldrb	r1, [r3, #0]
 8004586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800458a:	2202      	movs	r2, #2
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f002 fb2a 	bl	8006be6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004592:	4b51      	ldr	r3, [pc, #324]	; (80046d8 <USBD_CDC_Init+0x1e8>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	f003 020f 	and.w	r2, r3, #15
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80045aa:	2201      	movs	r2, #1
 80045ac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80045ae:	4b4b      	ldr	r3, [pc, #300]	; (80046dc <USBD_CDC_Init+0x1ec>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	f003 020f 	and.w	r2, r3, #15
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	3326      	adds	r3, #38	; 0x26
 80045c4:	2210      	movs	r2, #16
 80045c6:	801a      	strh	r2, [r3, #0]
 80045c8:	e035      	b.n	8004636 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80045ca:	4b42      	ldr	r3, [pc, #264]	; (80046d4 <USBD_CDC_Init+0x1e4>)
 80045cc:	7819      	ldrb	r1, [r3, #0]
 80045ce:	2340      	movs	r3, #64	; 0x40
 80045d0:	2202      	movs	r2, #2
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f002 fb07 	bl	8006be6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80045d8:	4b3e      	ldr	r3, [pc, #248]	; (80046d4 <USBD_CDC_Init+0x1e4>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	f003 020f 	and.w	r2, r3, #15
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	3324      	adds	r3, #36	; 0x24
 80045ee:	2201      	movs	r2, #1
 80045f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80045f2:	4b39      	ldr	r3, [pc, #228]	; (80046d8 <USBD_CDC_Init+0x1e8>)
 80045f4:	7819      	ldrb	r1, [r3, #0]
 80045f6:	2340      	movs	r3, #64	; 0x40
 80045f8:	2202      	movs	r2, #2
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f002 faf3 	bl	8006be6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004600:	4b35      	ldr	r3, [pc, #212]	; (80046d8 <USBD_CDC_Init+0x1e8>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	f003 020f 	and.w	r2, r3, #15
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004618:	2201      	movs	r2, #1
 800461a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800461c:	4b2f      	ldr	r3, [pc, #188]	; (80046dc <USBD_CDC_Init+0x1ec>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	f003 020f 	and.w	r2, r3, #15
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	3326      	adds	r3, #38	; 0x26
 8004632:	2210      	movs	r2, #16
 8004634:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004636:	4b29      	ldr	r3, [pc, #164]	; (80046dc <USBD_CDC_Init+0x1ec>)
 8004638:	7819      	ldrb	r1, [r3, #0]
 800463a:	2308      	movs	r3, #8
 800463c:	2203      	movs	r2, #3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f002 fad1 	bl	8006be6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004644:	4b25      	ldr	r3, [pc, #148]	; (80046dc <USBD_CDC_Init+0x1ec>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	f003 020f 	and.w	r2, r3, #15
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	3324      	adds	r3, #36	; 0x24
 800465a:	2201      	movs	r2, #1
 800465c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	33b0      	adds	r3, #176	; 0xb0
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004694:	2302      	movs	r3, #2
 8004696:	e018      	b.n	80046ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	7c1b      	ldrb	r3, [r3, #16]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80046a0:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <USBD_CDC_Init+0x1e8>)
 80046a2:	7819      	ldrb	r1, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f002 fb88 	bl	8006dc4 <USBD_LL_PrepareReceive>
 80046b4:	e008      	b.n	80046c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80046b6:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <USBD_CDC_Init+0x1e8>)
 80046b8:	7819      	ldrb	r1, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046c0:	2340      	movs	r3, #64	; 0x40
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f002 fb7e 	bl	8006dc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000093 	.word	0x20000093
 80046d8:	20000094 	.word	0x20000094
 80046dc:	20000095 	.word	0x20000095

080046e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80046ec:	4b3a      	ldr	r3, [pc, #232]	; (80047d8 <USBD_CDC_DeInit+0xf8>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	4619      	mov	r1, r3
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f002 fa9d 	bl	8006c32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80046f8:	4b37      	ldr	r3, [pc, #220]	; (80047d8 <USBD_CDC_DeInit+0xf8>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	f003 020f 	and.w	r2, r3, #15
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	3324      	adds	r3, #36	; 0x24
 800470e:	2200      	movs	r2, #0
 8004710:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004712:	4b32      	ldr	r3, [pc, #200]	; (80047dc <USBD_CDC_DeInit+0xfc>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	4619      	mov	r1, r3
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f002 fa8a 	bl	8006c32 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800471e:	4b2f      	ldr	r3, [pc, #188]	; (80047dc <USBD_CDC_DeInit+0xfc>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	f003 020f 	and.w	r2, r3, #15
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004736:	2200      	movs	r2, #0
 8004738:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800473a:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <USBD_CDC_DeInit+0x100>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	4619      	mov	r1, r3
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f002 fa76 	bl	8006c32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004746:	4b26      	ldr	r3, [pc, #152]	; (80047e0 <USBD_CDC_DeInit+0x100>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	f003 020f 	and.w	r2, r3, #15
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	3324      	adds	r3, #36	; 0x24
 800475c:	2200      	movs	r2, #0
 800475e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004760:	4b1f      	ldr	r3, [pc, #124]	; (80047e0 <USBD_CDC_DeInit+0x100>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	f003 020f 	and.w	r2, r3, #15
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	3326      	adds	r3, #38	; 0x26
 8004776:	2200      	movs	r2, #0
 8004778:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	32b0      	adds	r2, #176	; 0xb0
 8004784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01f      	beq.n	80047cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	33b0      	adds	r3, #176	; 0xb0
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	32b0      	adds	r2, #176	; 0xb0
 80047aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f002 fb4a 	bl	8006e48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	32b0      	adds	r2, #176	; 0xb0
 80047be:	2100      	movs	r1, #0
 80047c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20000093 	.word	0x20000093
 80047dc:	20000094 	.word	0x20000094
 80047e0:	20000095 	.word	0x20000095

080047e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	32b0      	adds	r2, #176	; 0xb0
 80047f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004810:	2303      	movs	r3, #3
 8004812:	e0bf      	b.n	8004994 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800481c:	2b00      	cmp	r3, #0
 800481e:	d050      	beq.n	80048c2 <USBD_CDC_Setup+0xde>
 8004820:	2b20      	cmp	r3, #32
 8004822:	f040 80af 	bne.w	8004984 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	88db      	ldrh	r3, [r3, #6]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d03a      	beq.n	80048a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	b25b      	sxtb	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	da1b      	bge.n	8004870 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	33b0      	adds	r3, #176	; 0xb0
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800484e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	88d2      	ldrh	r2, [r2, #6]
 8004854:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	88db      	ldrh	r3, [r3, #6]
 800485a:	2b07      	cmp	r3, #7
 800485c:	bf28      	it	cs
 800485e:	2307      	movcs	r3, #7
 8004860:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	89fa      	ldrh	r2, [r7, #14]
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f001 fd89 	bl	8006380 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800486e:	e090      	b.n	8004992 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	785a      	ldrb	r2, [r3, #1]
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	88db      	ldrh	r3, [r3, #6]
 800487e:	2b3f      	cmp	r3, #63	; 0x3f
 8004880:	d803      	bhi.n	800488a <USBD_CDC_Setup+0xa6>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	88db      	ldrh	r3, [r3, #6]
 8004886:	b2da      	uxtb	r2, r3
 8004888:	e000      	b.n	800488c <USBD_CDC_Setup+0xa8>
 800488a:	2240      	movs	r2, #64	; 0x40
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004892:	6939      	ldr	r1, [r7, #16]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800489a:	461a      	mov	r2, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f001 fd9b 	bl	80063d8 <USBD_CtlPrepareRx>
      break;
 80048a2:	e076      	b.n	8004992 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	33b0      	adds	r3, #176	; 0xb0
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	7850      	ldrb	r0, [r2, #1]
 80048ba:	2200      	movs	r2, #0
 80048bc:	6839      	ldr	r1, [r7, #0]
 80048be:	4798      	blx	r3
      break;
 80048c0:	e067      	b.n	8004992 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	785b      	ldrb	r3, [r3, #1]
 80048c6:	2b0b      	cmp	r3, #11
 80048c8:	d851      	bhi.n	800496e <USBD_CDC_Setup+0x18a>
 80048ca:	a201      	add	r2, pc, #4	; (adr r2, 80048d0 <USBD_CDC_Setup+0xec>)
 80048cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d0:	08004901 	.word	0x08004901
 80048d4:	0800497d 	.word	0x0800497d
 80048d8:	0800496f 	.word	0x0800496f
 80048dc:	0800496f 	.word	0x0800496f
 80048e0:	0800496f 	.word	0x0800496f
 80048e4:	0800496f 	.word	0x0800496f
 80048e8:	0800496f 	.word	0x0800496f
 80048ec:	0800496f 	.word	0x0800496f
 80048f0:	0800496f 	.word	0x0800496f
 80048f4:	0800496f 	.word	0x0800496f
 80048f8:	0800492b 	.word	0x0800492b
 80048fc:	08004955 	.word	0x08004955
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b03      	cmp	r3, #3
 800490a:	d107      	bne.n	800491c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800490c:	f107 030a 	add.w	r3, r7, #10
 8004910:	2202      	movs	r2, #2
 8004912:	4619      	mov	r1, r3
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f001 fd33 	bl	8006380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800491a:	e032      	b.n	8004982 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800491c:	6839      	ldr	r1, [r7, #0]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f001 fcbd 	bl	800629e <USBD_CtlError>
            ret = USBD_FAIL;
 8004924:	2303      	movs	r3, #3
 8004926:	75fb      	strb	r3, [r7, #23]
          break;
 8004928:	e02b      	b.n	8004982 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b03      	cmp	r3, #3
 8004934:	d107      	bne.n	8004946 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004936:	f107 030d 	add.w	r3, r7, #13
 800493a:	2201      	movs	r2, #1
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f001 fd1e 	bl	8006380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004944:	e01d      	b.n	8004982 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004946:	6839      	ldr	r1, [r7, #0]
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f001 fca8 	bl	800629e <USBD_CtlError>
            ret = USBD_FAIL;
 800494e:	2303      	movs	r3, #3
 8004950:	75fb      	strb	r3, [r7, #23]
          break;
 8004952:	e016      	b.n	8004982 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b03      	cmp	r3, #3
 800495e:	d00f      	beq.n	8004980 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f001 fc9b 	bl	800629e <USBD_CtlError>
            ret = USBD_FAIL;
 8004968:	2303      	movs	r3, #3
 800496a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800496c:	e008      	b.n	8004980 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800496e:	6839      	ldr	r1, [r7, #0]
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f001 fc94 	bl	800629e <USBD_CtlError>
          ret = USBD_FAIL;
 8004976:	2303      	movs	r3, #3
 8004978:	75fb      	strb	r3, [r7, #23]
          break;
 800497a:	e002      	b.n	8004982 <USBD_CDC_Setup+0x19e>
          break;
 800497c:	bf00      	nop
 800497e:	e008      	b.n	8004992 <USBD_CDC_Setup+0x1ae>
          break;
 8004980:	bf00      	nop
      }
      break;
 8004982:	e006      	b.n	8004992 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f001 fc89 	bl	800629e <USBD_CtlError>
      ret = USBD_FAIL;
 800498c:	2303      	movs	r3, #3
 800498e:	75fb      	strb	r3, [r7, #23]
      break;
 8004990:	bf00      	nop
  }

  return (uint8_t)ret;
 8004992:	7dfb      	ldrb	r3, [r7, #23]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80049ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	32b0      	adds	r2, #176	; 0xb0
 80049ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e065      	b.n	8004a92 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	32b0      	adds	r2, #176	; 0xb0
 80049d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80049d6:	78fb      	ldrb	r3, [r7, #3]
 80049d8:	f003 020f 	and.w	r2, r3, #15
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	3318      	adds	r3, #24
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d02f      	beq.n	8004a50 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	f003 020f 	and.w	r2, r3, #15
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	3318      	adds	r3, #24
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	78fb      	ldrb	r3, [r7, #3]
 8004a08:	f003 010f 	and.w	r1, r3, #15
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	440b      	add	r3, r1
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4403      	add	r3, r0
 8004a18:	3348      	adds	r3, #72	; 0x48
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a20:	fb01 f303 	mul.w	r3, r1, r3
 8004a24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d112      	bne.n	8004a50 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	f003 020f 	and.w	r2, r3, #15
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	3318      	adds	r3, #24
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004a42:	78f9      	ldrb	r1, [r7, #3]
 8004a44:	2300      	movs	r3, #0
 8004a46:	2200      	movs	r2, #0
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f002 f99a 	bl	8006d82 <USBD_LL_Transmit>
 8004a4e:	e01f      	b.n	8004a90 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	33b0      	adds	r3, #176	; 0xb0
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d010      	beq.n	8004a90 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	33b0      	adds	r3, #176	; 0xb0
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	32b0      	adds	r2, #176	; 0xb0
 8004ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ab4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	32b0      	adds	r2, #176	; 0xb0
 8004ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e01a      	b.n	8004b02 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f002 f998 	bl	8006e06 <USBD_LL_GetRxDataSize>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	33b0      	adds	r3, #176	; 0xb0
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004afc:	4611      	mov	r1, r2
 8004afe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b084      	sub	sp, #16
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	32b0      	adds	r2, #176	; 0xb0
 8004b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e025      	b.n	8004b78 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	33b0      	adds	r3, #176	; 0xb0
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01a      	beq.n	8004b76 <USBD_CDC_EP0_RxReady+0x6c>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004b46:	2bff      	cmp	r3, #255	; 0xff
 8004b48:	d015      	beq.n	8004b76 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	33b0      	adds	r3, #176	; 0xb0
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004b62:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004b6a:	b292      	uxth	r2, r2
 8004b6c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	22ff      	movs	r2, #255	; 0xff
 8004b72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004b88:	2182      	movs	r1, #130	; 0x82
 8004b8a:	4818      	ldr	r0, [pc, #96]	; (8004bec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004b8c:	f000 fd4f 	bl	800562e <USBD_GetEpDesc>
 8004b90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004b92:	2101      	movs	r1, #1
 8004b94:	4815      	ldr	r0, [pc, #84]	; (8004bec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004b96:	f000 fd4a 	bl	800562e <USBD_GetEpDesc>
 8004b9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004b9c:	2181      	movs	r1, #129	; 0x81
 8004b9e:	4813      	ldr	r0, [pc, #76]	; (8004bec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004ba0:	f000 fd45 	bl	800562e <USBD_GetEpDesc>
 8004ba4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2210      	movs	r2, #16
 8004bb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d006      	beq.n	8004bc6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bc0:	711a      	strb	r2, [r3, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d006      	beq.n	8004bda <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bd4:	711a      	strb	r2, [r3, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2243      	movs	r2, #67	; 0x43
 8004bde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004be0:	4b02      	ldr	r3, [pc, #8]	; (8004bec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000050 	.word	0x20000050

08004bf0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004bf8:	2182      	movs	r1, #130	; 0x82
 8004bfa:	4818      	ldr	r0, [pc, #96]	; (8004c5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004bfc:	f000 fd17 	bl	800562e <USBD_GetEpDesc>
 8004c00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c02:	2101      	movs	r1, #1
 8004c04:	4815      	ldr	r0, [pc, #84]	; (8004c5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c06:	f000 fd12 	bl	800562e <USBD_GetEpDesc>
 8004c0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c0c:	2181      	movs	r1, #129	; 0x81
 8004c0e:	4813      	ldr	r0, [pc, #76]	; (8004c5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c10:	f000 fd0d 	bl	800562e <USBD_GetEpDesc>
 8004c14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2210      	movs	r2, #16
 8004c20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d006      	beq.n	8004c36 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	711a      	strb	r2, [r3, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f042 0202 	orr.w	r2, r2, #2
 8004c34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d006      	beq.n	8004c4a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	711a      	strb	r2, [r3, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f042 0202 	orr.w	r2, r2, #2
 8004c48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2243      	movs	r2, #67	; 0x43
 8004c4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c50:	4b02      	ldr	r3, [pc, #8]	; (8004c5c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000050 	.word	0x20000050

08004c60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c68:	2182      	movs	r1, #130	; 0x82
 8004c6a:	4818      	ldr	r0, [pc, #96]	; (8004ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004c6c:	f000 fcdf 	bl	800562e <USBD_GetEpDesc>
 8004c70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c72:	2101      	movs	r1, #1
 8004c74:	4815      	ldr	r0, [pc, #84]	; (8004ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004c76:	f000 fcda 	bl	800562e <USBD_GetEpDesc>
 8004c7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c7c:	2181      	movs	r1, #129	; 0x81
 8004c7e:	4813      	ldr	r0, [pc, #76]	; (8004ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004c80:	f000 fcd5 	bl	800562e <USBD_GetEpDesc>
 8004c84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2210      	movs	r2, #16
 8004c90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d006      	beq.n	8004ca6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca0:	711a      	strb	r2, [r3, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d006      	beq.n	8004cba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cb4:	711a      	strb	r2, [r3, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2243      	movs	r2, #67	; 0x43
 8004cbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004cc0:	4b02      	ldr	r3, [pc, #8]	; (8004ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000050 	.word	0x20000050

08004cd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	220a      	movs	r2, #10
 8004cdc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004cde:	4b03      	ldr	r3, [pc, #12]	; (8004cec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	2000000c 	.word	0x2000000c

08004cf0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e009      	b.n	8004d18 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	33b0      	adds	r3, #176	; 0xb0
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	32b0      	adds	r2, #176	; 0xb0
 8004d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d3e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e008      	b.n	8004d5c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	32b0      	adds	r2, #176	; 0xb0
 8004d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e004      	b.n	8004d96 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
	...

08004da4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	32b0      	adds	r2, #176	; 0xb0
 8004db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dba:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	32b0      	adds	r2, #176	; 0xb0
 8004dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e025      	b.n	8004e22 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d11f      	bne.n	8004e20 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004de8:	4b10      	ldr	r3, [pc, #64]	; (8004e2c <USBD_CDC_TransmitPacket+0x88>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	f003 020f 	and.w	r2, r3, #15
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4403      	add	r3, r0
 8004e02:	3318      	adds	r3, #24
 8004e04:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004e06:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <USBD_CDC_TransmitPacket+0x88>)
 8004e08:	7819      	ldrb	r1, [r3, #0]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f001 ffb3 	bl	8006d82 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000093 	.word	0x20000093

08004e30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	32b0      	adds	r2, #176	; 0xb0
 8004e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e46:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	32b0      	adds	r2, #176	; 0xb0
 8004e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e018      	b.n	8004e90 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	7c1b      	ldrb	r3, [r3, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10a      	bne.n	8004e7c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e66:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <USBD_CDC_ReceivePacket+0x68>)
 8004e68:	7819      	ldrb	r1, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f001 ffa5 	bl	8006dc4 <USBD_LL_PrepareReceive>
 8004e7a:	e008      	b.n	8004e8e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e7c:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <USBD_CDC_ReceivePacket+0x68>)
 8004e7e:	7819      	ldrb	r1, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e86:	2340      	movs	r3, #64	; 0x40
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f001 ff9b 	bl	8006dc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	20000094 	.word	0x20000094

08004e9c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e01f      	b.n	8004ef4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	79fa      	ldrb	r2, [r7, #7]
 8004ee6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f001 fe15 	bl	8006b18 <USBD_LL_Init>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e025      	b.n	8004f60 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	32ae      	adds	r2, #174	; 0xae
 8004f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00f      	beq.n	8004f50 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	32ae      	adds	r2, #174	; 0xae
 8004f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f40:	f107 020e 	add.w	r2, r7, #14
 8004f44:	4610      	mov	r0, r2
 8004f46:	4798      	blx	r3
 8004f48:	4602      	mov	r2, r0
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f001 fe1d 	bl	8006bb0 <USBD_LL_Start>
 8004f76:	4603      	mov	r3, r0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004f88:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d009      	beq.n	8004fc4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	78fa      	ldrb	r2, [r7, #3]
 8004fba:	4611      	mov	r1, r2
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	4798      	blx	r3
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	78fa      	ldrb	r2, [r7, #3]
 8004fe8:	4611      	mov	r1, r2
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	4798      	blx	r3
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005012:	6839      	ldr	r1, [r7, #0]
 8005014:	4618      	mov	r0, r3
 8005016:	f001 f908 	bl	800622a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005028:	461a      	mov	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005036:	f003 031f 	and.w	r3, r3, #31
 800503a:	2b02      	cmp	r3, #2
 800503c:	d01a      	beq.n	8005074 <USBD_LL_SetupStage+0x72>
 800503e:	2b02      	cmp	r3, #2
 8005040:	d822      	bhi.n	8005088 <USBD_LL_SetupStage+0x86>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <USBD_LL_SetupStage+0x4a>
 8005046:	2b01      	cmp	r3, #1
 8005048:	d00a      	beq.n	8005060 <USBD_LL_SetupStage+0x5e>
 800504a:	e01d      	b.n	8005088 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005052:	4619      	mov	r1, r3
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fb5f 	bl	8005718 <USBD_StdDevReq>
 800505a:	4603      	mov	r3, r0
 800505c:	73fb      	strb	r3, [r7, #15]
      break;
 800505e:	e020      	b.n	80050a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005066:	4619      	mov	r1, r3
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fbc7 	bl	80057fc <USBD_StdItfReq>
 800506e:	4603      	mov	r3, r0
 8005070:	73fb      	strb	r3, [r7, #15]
      break;
 8005072:	e016      	b.n	80050a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fc29 	bl	80058d4 <USBD_StdEPReq>
 8005082:	4603      	mov	r3, r0
 8005084:	73fb      	strb	r3, [r7, #15]
      break;
 8005086:	e00c      	b.n	80050a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800508e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005092:	b2db      	uxtb	r3, r3
 8005094:	4619      	mov	r1, r3
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f001 fdea 	bl	8006c70 <USBD_LL_StallEP>
 800509c:	4603      	mov	r3, r0
 800509e:	73fb      	strb	r3, [r7, #15]
      break;
 80050a0:	bf00      	nop
  }

  return ret;
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	460b      	mov	r3, r1
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80050be:	7afb      	ldrb	r3, [r7, #11]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d16e      	bne.n	80051a2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80050ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	f040 8098 	bne.w	8005208 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d913      	bls.n	800510c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	1ad2      	subs	r2, r2, r3
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	4293      	cmp	r3, r2
 80050fc:	bf28      	it	cs
 80050fe:	4613      	movcs	r3, r2
 8005100:	461a      	mov	r2, r3
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f001 f984 	bl	8006412 <USBD_CtlContinueRx>
 800510a:	e07d      	b.n	8005208 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005112:	f003 031f 	and.w	r3, r3, #31
 8005116:	2b02      	cmp	r3, #2
 8005118:	d014      	beq.n	8005144 <USBD_LL_DataOutStage+0x98>
 800511a:	2b02      	cmp	r3, #2
 800511c:	d81d      	bhi.n	800515a <USBD_LL_DataOutStage+0xae>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <USBD_LL_DataOutStage+0x7c>
 8005122:	2b01      	cmp	r3, #1
 8005124:	d003      	beq.n	800512e <USBD_LL_DataOutStage+0x82>
 8005126:	e018      	b.n	800515a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	75bb      	strb	r3, [r7, #22]
            break;
 800512c:	e018      	b.n	8005160 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005134:	b2db      	uxtb	r3, r3
 8005136:	4619      	mov	r1, r3
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 fa5e 	bl	80055fa <USBD_CoreFindIF>
 800513e:	4603      	mov	r3, r0
 8005140:	75bb      	strb	r3, [r7, #22]
            break;
 8005142:	e00d      	b.n	8005160 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800514a:	b2db      	uxtb	r3, r3
 800514c:	4619      	mov	r1, r3
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 fa60 	bl	8005614 <USBD_CoreFindEP>
 8005154:	4603      	mov	r3, r0
 8005156:	75bb      	strb	r3, [r7, #22]
            break;
 8005158:	e002      	b.n	8005160 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	75bb      	strb	r3, [r7, #22]
            break;
 800515e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005160:	7dbb      	ldrb	r3, [r7, #22]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d119      	bne.n	800519a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b03      	cmp	r3, #3
 8005170:	d113      	bne.n	800519a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005172:	7dba      	ldrb	r2, [r7, #22]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	32ae      	adds	r2, #174	; 0xae
 8005178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00b      	beq.n	800519a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005182:	7dba      	ldrb	r2, [r7, #22]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800518a:	7dba      	ldrb	r2, [r7, #22]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	32ae      	adds	r2, #174	; 0xae
 8005190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f001 f94a 	bl	8006434 <USBD_CtlSendStatus>
 80051a0:	e032      	b.n	8005208 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80051a2:	7afb      	ldrb	r3, [r7, #11]
 80051a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	4619      	mov	r1, r3
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fa31 	bl	8005614 <USBD_CoreFindEP>
 80051b2:	4603      	mov	r3, r0
 80051b4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051b6:	7dbb      	ldrb	r3, [r7, #22]
 80051b8:	2bff      	cmp	r3, #255	; 0xff
 80051ba:	d025      	beq.n	8005208 <USBD_LL_DataOutStage+0x15c>
 80051bc:	7dbb      	ldrb	r3, [r7, #22]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d122      	bne.n	8005208 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d117      	bne.n	80051fe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80051ce:	7dba      	ldrb	r2, [r7, #22]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	32ae      	adds	r2, #174	; 0xae
 80051d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00f      	beq.n	80051fe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80051de:	7dba      	ldrb	r2, [r7, #22]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80051e6:	7dba      	ldrb	r2, [r7, #22]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	32ae      	adds	r2, #174	; 0xae
 80051ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	7afa      	ldrb	r2, [r7, #11]
 80051f4:	4611      	mov	r1, r2
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	4798      	blx	r3
 80051fa:	4603      	mov	r3, r0
 80051fc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005204:	7dfb      	ldrb	r3, [r7, #23]
 8005206:	e000      	b.n	800520a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b086      	sub	sp, #24
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	460b      	mov	r3, r1
 800521c:	607a      	str	r2, [r7, #4]
 800521e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005220:	7afb      	ldrb	r3, [r7, #11]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d16f      	bne.n	8005306 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3314      	adds	r3, #20
 800522a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005232:	2b02      	cmp	r3, #2
 8005234:	d15a      	bne.n	80052ec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	429a      	cmp	r2, r3
 8005240:	d914      	bls.n	800526c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	1ad2      	subs	r2, r2, r3
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	461a      	mov	r2, r3
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f001 f8ac 	bl	80063b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800525e:	2300      	movs	r3, #0
 8005260:	2200      	movs	r2, #0
 8005262:	2100      	movs	r1, #0
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f001 fdad 	bl	8006dc4 <USBD_LL_PrepareReceive>
 800526a:	e03f      	b.n	80052ec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	429a      	cmp	r2, r3
 8005276:	d11c      	bne.n	80052b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005280:	429a      	cmp	r2, r3
 8005282:	d316      	bcc.n	80052b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800528e:	429a      	cmp	r2, r3
 8005290:	d20f      	bcs.n	80052b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005292:	2200      	movs	r2, #0
 8005294:	2100      	movs	r1, #0
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f001 f88d 	bl	80063b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052a4:	2300      	movs	r3, #0
 80052a6:	2200      	movs	r2, #0
 80052a8:	2100      	movs	r1, #0
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f001 fd8a 	bl	8006dc4 <USBD_LL_PrepareReceive>
 80052b0:	e01c      	b.n	80052ec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d10f      	bne.n	80052de <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d009      	beq.n	80052de <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80052de:	2180      	movs	r1, #128	; 0x80
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f001 fcc5 	bl	8006c70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f001 f8b7 	bl	800645a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d03a      	beq.n	800536c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7ff fe42 	bl	8004f80 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005304:	e032      	b.n	800536c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005306:	7afb      	ldrb	r3, [r7, #11]
 8005308:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800530c:	b2db      	uxtb	r3, r3
 800530e:	4619      	mov	r1, r3
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f97f 	bl	8005614 <USBD_CoreFindEP>
 8005316:	4603      	mov	r3, r0
 8005318:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800531a:	7dfb      	ldrb	r3, [r7, #23]
 800531c:	2bff      	cmp	r3, #255	; 0xff
 800531e:	d025      	beq.n	800536c <USBD_LL_DataInStage+0x15a>
 8005320:	7dfb      	ldrb	r3, [r7, #23]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d122      	bne.n	800536c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b03      	cmp	r3, #3
 8005330:	d11c      	bne.n	800536c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005332:	7dfa      	ldrb	r2, [r7, #23]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	32ae      	adds	r2, #174	; 0xae
 8005338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d014      	beq.n	800536c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005342:	7dfa      	ldrb	r2, [r7, #23]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800534a:	7dfa      	ldrb	r2, [r7, #23]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	32ae      	adds	r2, #174	; 0xae
 8005350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	7afa      	ldrb	r2, [r7, #11]
 8005358:	4611      	mov	r1, r2
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	4798      	blx	r3
 800535e:	4603      	mov	r3, r0
 8005360:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005362:	7dbb      	ldrb	r3, [r7, #22]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005368:	7dbb      	ldrb	r3, [r7, #22]
 800536a:	e000      	b.n	800536e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d014      	beq.n	80053dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00e      	beq.n	80053dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6852      	ldr	r2, [r2, #4]
 80053ca:	b2d2      	uxtb	r2, r2
 80053cc:	4611      	mov	r1, r2
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	4798      	blx	r3
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80053d8:	2303      	movs	r3, #3
 80053da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053dc:	2340      	movs	r3, #64	; 0x40
 80053de:	2200      	movs	r2, #0
 80053e0:	2100      	movs	r1, #0
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f001 fbff 	bl	8006be6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2240      	movs	r2, #64	; 0x40
 80053f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053f8:	2340      	movs	r3, #64	; 0x40
 80053fa:	2200      	movs	r2, #0
 80053fc:	2180      	movs	r1, #128	; 0x80
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f001 fbf1 	bl	8006be6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2240      	movs	r2, #64	; 0x40
 800540e:	621a      	str	r2, [r3, #32]

  return ret;
 8005410:	7bfb      	ldrb	r3, [r7, #15]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	460b      	mov	r3, r1
 8005424:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	78fa      	ldrb	r2, [r7, #3]
 800542a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005448:	b2da      	uxtb	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2204      	movs	r2, #4
 8005454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b04      	cmp	r3, #4
 8005478:	d106      	bne.n	8005488 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005480:	b2da      	uxtb	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b082      	sub	sp, #8
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d110      	bne.n	80054cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00b      	beq.n	80054cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b082      	sub	sp, #8
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	460b      	mov	r3, r1
 80054e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	32ae      	adds	r2, #174	; 0xae
 80054ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e01c      	b.n	8005532 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b03      	cmp	r3, #3
 8005502:	d115      	bne.n	8005530 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	32ae      	adds	r2, #174	; 0xae
 800550e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00b      	beq.n	8005530 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	32ae      	adds	r2, #174	; 0xae
 8005522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	78fa      	ldrb	r2, [r7, #3]
 800552a:	4611      	mov	r1, r2
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b082      	sub	sp, #8
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	460b      	mov	r3, r1
 8005544:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	32ae      	adds	r2, #174	; 0xae
 8005550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005558:	2303      	movs	r3, #3
 800555a:	e01c      	b.n	8005596 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b03      	cmp	r3, #3
 8005566:	d115      	bne.n	8005594 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	32ae      	adds	r2, #174	; 0xae
 8005572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00b      	beq.n	8005594 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	32ae      	adds	r2, #174	; 0xae
 8005586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	78fa      	ldrb	r2, [r7, #3]
 800558e:	4611      	mov	r1, r2
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80055bc:	2300      	movs	r3, #0
 80055be:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00e      	beq.n	80055f0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6852      	ldr	r2, [r2, #4]
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	4611      	mov	r1, r2
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	4798      	blx	r3
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80055ec:	2303      	movs	r3, #3
 80055ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	460b      	mov	r3, r1
 8005604:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005606:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005620:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005622:	4618      	mov	r0, r3
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b086      	sub	sp, #24
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	460b      	mov	r3, r1
 8005638:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005642:	2300      	movs	r3, #0
 8005644:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	885b      	ldrh	r3, [r3, #2]
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	429a      	cmp	r2, r3
 8005654:	d920      	bls.n	8005698 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	b29b      	uxth	r3, r3
 800565c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800565e:	e013      	b.n	8005688 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005660:	f107 030a 	add.w	r3, r7, #10
 8005664:	4619      	mov	r1, r3
 8005666:	6978      	ldr	r0, [r7, #20]
 8005668:	f000 f81b 	bl	80056a2 <USBD_GetNextDesc>
 800566c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	785b      	ldrb	r3, [r3, #1]
 8005672:	2b05      	cmp	r3, #5
 8005674:	d108      	bne.n	8005688 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	789b      	ldrb	r3, [r3, #2]
 800567e:	78fa      	ldrb	r2, [r7, #3]
 8005680:	429a      	cmp	r2, r3
 8005682:	d008      	beq.n	8005696 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005684:	2300      	movs	r3, #0
 8005686:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	885b      	ldrh	r3, [r3, #2]
 800568c:	b29a      	uxth	r2, r3
 800568e:	897b      	ldrh	r3, [r7, #10]
 8005690:	429a      	cmp	r2, r3
 8005692:	d8e5      	bhi.n	8005660 <USBD_GetEpDesc+0x32>
 8005694:	e000      	b.n	8005698 <USBD_GetEpDesc+0x6a>
          break;
 8005696:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005698:	693b      	ldr	r3, [r7, #16]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	881a      	ldrh	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	4413      	add	r3, r2
 80056bc:	b29a      	uxth	r2, r3
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4413      	add	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80056ce:	68fb      	ldr	r3, [r7, #12]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	3301      	adds	r3, #1
 80056f2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80056fa:	8a3b      	ldrh	r3, [r7, #16]
 80056fc:	021b      	lsls	r3, r3, #8
 80056fe:	b21a      	sxth	r2, r3
 8005700:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005704:	4313      	orrs	r3, r2
 8005706:	b21b      	sxth	r3, r3
 8005708:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800570a:	89fb      	ldrh	r3, [r7, #14]
}
 800570c:	4618      	mov	r0, r3
 800570e:	371c      	adds	r7, #28
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d005      	beq.n	800573e <USBD_StdDevReq+0x26>
 8005732:	2b40      	cmp	r3, #64	; 0x40
 8005734:	d857      	bhi.n	80057e6 <USBD_StdDevReq+0xce>
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00f      	beq.n	800575a <USBD_StdDevReq+0x42>
 800573a:	2b20      	cmp	r3, #32
 800573c:	d153      	bne.n	80057e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	32ae      	adds	r2, #174	; 0xae
 8005748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	6839      	ldr	r1, [r7, #0]
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	4798      	blx	r3
 8005754:	4603      	mov	r3, r0
 8005756:	73fb      	strb	r3, [r7, #15]
      break;
 8005758:	e04a      	b.n	80057f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	785b      	ldrb	r3, [r3, #1]
 800575e:	2b09      	cmp	r3, #9
 8005760:	d83b      	bhi.n	80057da <USBD_StdDevReq+0xc2>
 8005762:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <USBD_StdDevReq+0x50>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	080057bd 	.word	0x080057bd
 800576c:	080057d1 	.word	0x080057d1
 8005770:	080057db 	.word	0x080057db
 8005774:	080057c7 	.word	0x080057c7
 8005778:	080057db 	.word	0x080057db
 800577c:	0800579b 	.word	0x0800579b
 8005780:	08005791 	.word	0x08005791
 8005784:	080057db 	.word	0x080057db
 8005788:	080057b3 	.word	0x080057b3
 800578c:	080057a5 	.word	0x080057a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005790:	6839      	ldr	r1, [r7, #0]
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fa3c 	bl	8005c10 <USBD_GetDescriptor>
          break;
 8005798:	e024      	b.n	80057e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800579a:	6839      	ldr	r1, [r7, #0]
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fba1 	bl	8005ee4 <USBD_SetAddress>
          break;
 80057a2:	e01f      	b.n	80057e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80057a4:	6839      	ldr	r1, [r7, #0]
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fbe0 	bl	8005f6c <USBD_SetConfig>
 80057ac:	4603      	mov	r3, r0
 80057ae:	73fb      	strb	r3, [r7, #15]
          break;
 80057b0:	e018      	b.n	80057e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fc83 	bl	80060c0 <USBD_GetConfig>
          break;
 80057ba:	e013      	b.n	80057e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80057bc:	6839      	ldr	r1, [r7, #0]
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fcb4 	bl	800612c <USBD_GetStatus>
          break;
 80057c4:	e00e      	b.n	80057e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80057c6:	6839      	ldr	r1, [r7, #0]
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fce3 	bl	8006194 <USBD_SetFeature>
          break;
 80057ce:	e009      	b.n	80057e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fd07 	bl	80061e6 <USBD_ClrFeature>
          break;
 80057d8:	e004      	b.n	80057e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80057da:	6839      	ldr	r1, [r7, #0]
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fd5e 	bl	800629e <USBD_CtlError>
          break;
 80057e2:	bf00      	nop
      }
      break;
 80057e4:	e004      	b.n	80057f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fd58 	bl	800629e <USBD_CtlError>
      break;
 80057ee:	bf00      	nop
  }

  return ret;
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop

080057fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005812:	2b40      	cmp	r3, #64	; 0x40
 8005814:	d005      	beq.n	8005822 <USBD_StdItfReq+0x26>
 8005816:	2b40      	cmp	r3, #64	; 0x40
 8005818:	d852      	bhi.n	80058c0 <USBD_StdItfReq+0xc4>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <USBD_StdItfReq+0x26>
 800581e:	2b20      	cmp	r3, #32
 8005820:	d14e      	bne.n	80058c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005828:	b2db      	uxtb	r3, r3
 800582a:	3b01      	subs	r3, #1
 800582c:	2b02      	cmp	r3, #2
 800582e:	d840      	bhi.n	80058b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	889b      	ldrh	r3, [r3, #4]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b01      	cmp	r3, #1
 8005838:	d836      	bhi.n	80058a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	889b      	ldrh	r3, [r3, #4]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff fed9 	bl	80055fa <USBD_CoreFindIF>
 8005848:	4603      	mov	r3, r0
 800584a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800584c:	7bbb      	ldrb	r3, [r7, #14]
 800584e:	2bff      	cmp	r3, #255	; 0xff
 8005850:	d01d      	beq.n	800588e <USBD_StdItfReq+0x92>
 8005852:	7bbb      	ldrb	r3, [r7, #14]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d11a      	bne.n	800588e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005858:	7bba      	ldrb	r2, [r7, #14]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	32ae      	adds	r2, #174	; 0xae
 800585e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00f      	beq.n	8005888 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005868:	7bba      	ldrb	r2, [r7, #14]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005870:	7bba      	ldrb	r2, [r7, #14]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	32ae      	adds	r2, #174	; 0xae
 8005876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	6839      	ldr	r1, [r7, #0]
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	4798      	blx	r3
 8005882:	4603      	mov	r3, r0
 8005884:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005886:	e004      	b.n	8005892 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005888:	2303      	movs	r3, #3
 800588a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800588c:	e001      	b.n	8005892 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800588e:	2303      	movs	r3, #3
 8005890:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	88db      	ldrh	r3, [r3, #6]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d110      	bne.n	80058bc <USBD_StdItfReq+0xc0>
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10d      	bne.n	80058bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fdc7 	bl	8006434 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80058a6:	e009      	b.n	80058bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fcf7 	bl	800629e <USBD_CtlError>
          break;
 80058b0:	e004      	b.n	80058bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fcf2 	bl	800629e <USBD_CtlError>
          break;
 80058ba:	e000      	b.n	80058be <USBD_StdItfReq+0xc2>
          break;
 80058bc:	bf00      	nop
      }
      break;
 80058be:	e004      	b.n	80058ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fceb 	bl	800629e <USBD_CtlError>
      break;
 80058c8:	bf00      	nop
  }

  return ret;
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	889b      	ldrh	r3, [r3, #4]
 80058e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058f0:	2b40      	cmp	r3, #64	; 0x40
 80058f2:	d007      	beq.n	8005904 <USBD_StdEPReq+0x30>
 80058f4:	2b40      	cmp	r3, #64	; 0x40
 80058f6:	f200 817f 	bhi.w	8005bf8 <USBD_StdEPReq+0x324>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d02a      	beq.n	8005954 <USBD_StdEPReq+0x80>
 80058fe:	2b20      	cmp	r3, #32
 8005900:	f040 817a 	bne.w	8005bf8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005904:	7bbb      	ldrb	r3, [r7, #14]
 8005906:	4619      	mov	r1, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff fe83 	bl	8005614 <USBD_CoreFindEP>
 800590e:	4603      	mov	r3, r0
 8005910:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005912:	7b7b      	ldrb	r3, [r7, #13]
 8005914:	2bff      	cmp	r3, #255	; 0xff
 8005916:	f000 8174 	beq.w	8005c02 <USBD_StdEPReq+0x32e>
 800591a:	7b7b      	ldrb	r3, [r7, #13]
 800591c:	2b00      	cmp	r3, #0
 800591e:	f040 8170 	bne.w	8005c02 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005922:	7b7a      	ldrb	r2, [r7, #13]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800592a:	7b7a      	ldrb	r2, [r7, #13]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	32ae      	adds	r2, #174	; 0xae
 8005930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 8163 	beq.w	8005c02 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800593c:	7b7a      	ldrb	r2, [r7, #13]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	32ae      	adds	r2, #174	; 0xae
 8005942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	6839      	ldr	r1, [r7, #0]
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	4798      	blx	r3
 800594e:	4603      	mov	r3, r0
 8005950:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005952:	e156      	b.n	8005c02 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	785b      	ldrb	r3, [r3, #1]
 8005958:	2b03      	cmp	r3, #3
 800595a:	d008      	beq.n	800596e <USBD_StdEPReq+0x9a>
 800595c:	2b03      	cmp	r3, #3
 800595e:	f300 8145 	bgt.w	8005bec <USBD_StdEPReq+0x318>
 8005962:	2b00      	cmp	r3, #0
 8005964:	f000 809b 	beq.w	8005a9e <USBD_StdEPReq+0x1ca>
 8005968:	2b01      	cmp	r3, #1
 800596a:	d03c      	beq.n	80059e6 <USBD_StdEPReq+0x112>
 800596c:	e13e      	b.n	8005bec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d002      	beq.n	8005980 <USBD_StdEPReq+0xac>
 800597a:	2b03      	cmp	r3, #3
 800597c:	d016      	beq.n	80059ac <USBD_StdEPReq+0xd8>
 800597e:	e02c      	b.n	80059da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005980:	7bbb      	ldrb	r3, [r7, #14]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00d      	beq.n	80059a2 <USBD_StdEPReq+0xce>
 8005986:	7bbb      	ldrb	r3, [r7, #14]
 8005988:	2b80      	cmp	r3, #128	; 0x80
 800598a:	d00a      	beq.n	80059a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800598c:	7bbb      	ldrb	r3, [r7, #14]
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 f96d 	bl	8006c70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005996:	2180      	movs	r1, #128	; 0x80
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 f969 	bl	8006c70 <USBD_LL_StallEP>
 800599e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059a0:	e020      	b.n	80059e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fc7a 	bl	800629e <USBD_CtlError>
              break;
 80059aa:	e01b      	b.n	80059e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	885b      	ldrh	r3, [r3, #2]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10e      	bne.n	80059d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80059b4:	7bbb      	ldrb	r3, [r7, #14]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00b      	beq.n	80059d2 <USBD_StdEPReq+0xfe>
 80059ba:	7bbb      	ldrb	r3, [r7, #14]
 80059bc:	2b80      	cmp	r3, #128	; 0x80
 80059be:	d008      	beq.n	80059d2 <USBD_StdEPReq+0xfe>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	88db      	ldrh	r3, [r3, #6]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d104      	bne.n	80059d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80059c8:	7bbb      	ldrb	r3, [r7, #14]
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 f94f 	bl	8006c70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fd2e 	bl	8006434 <USBD_CtlSendStatus>

              break;
 80059d8:	e004      	b.n	80059e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fc5e 	bl	800629e <USBD_CtlError>
              break;
 80059e2:	bf00      	nop
          }
          break;
 80059e4:	e107      	b.n	8005bf6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d002      	beq.n	80059f8 <USBD_StdEPReq+0x124>
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d016      	beq.n	8005a24 <USBD_StdEPReq+0x150>
 80059f6:	e04b      	b.n	8005a90 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059f8:	7bbb      	ldrb	r3, [r7, #14]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00d      	beq.n	8005a1a <USBD_StdEPReq+0x146>
 80059fe:	7bbb      	ldrb	r3, [r7, #14]
 8005a00:	2b80      	cmp	r3, #128	; 0x80
 8005a02:	d00a      	beq.n	8005a1a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a04:	7bbb      	ldrb	r3, [r7, #14]
 8005a06:	4619      	mov	r1, r3
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f001 f931 	bl	8006c70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a0e:	2180      	movs	r1, #128	; 0x80
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f001 f92d 	bl	8006c70 <USBD_LL_StallEP>
 8005a16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a18:	e040      	b.n	8005a9c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fc3e 	bl	800629e <USBD_CtlError>
              break;
 8005a22:	e03b      	b.n	8005a9c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	885b      	ldrh	r3, [r3, #2]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d136      	bne.n	8005a9a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a2c:	7bbb      	ldrb	r3, [r7, #14]
 8005a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d004      	beq.n	8005a40 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a36:	7bbb      	ldrb	r3, [r7, #14]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f001 f937 	bl	8006cae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fcf7 	bl	8006434 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005a46:	7bbb      	ldrb	r3, [r7, #14]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7ff fde2 	bl	8005614 <USBD_CoreFindEP>
 8005a50:	4603      	mov	r3, r0
 8005a52:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a54:	7b7b      	ldrb	r3, [r7, #13]
 8005a56:	2bff      	cmp	r3, #255	; 0xff
 8005a58:	d01f      	beq.n	8005a9a <USBD_StdEPReq+0x1c6>
 8005a5a:	7b7b      	ldrb	r3, [r7, #13]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d11c      	bne.n	8005a9a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005a60:	7b7a      	ldrb	r2, [r7, #13]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005a68:	7b7a      	ldrb	r2, [r7, #13]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	32ae      	adds	r2, #174	; 0xae
 8005a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d010      	beq.n	8005a9a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005a78:	7b7a      	ldrb	r2, [r7, #13]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	32ae      	adds	r2, #174	; 0xae
 8005a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	4798      	blx	r3
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005a8e:	e004      	b.n	8005a9a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fc03 	bl	800629e <USBD_CtlError>
              break;
 8005a98:	e000      	b.n	8005a9c <USBD_StdEPReq+0x1c8>
              break;
 8005a9a:	bf00      	nop
          }
          break;
 8005a9c:	e0ab      	b.n	8005bf6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d002      	beq.n	8005ab0 <USBD_StdEPReq+0x1dc>
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d032      	beq.n	8005b14 <USBD_StdEPReq+0x240>
 8005aae:	e097      	b.n	8005be0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ab0:	7bbb      	ldrb	r3, [r7, #14]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <USBD_StdEPReq+0x1f2>
 8005ab6:	7bbb      	ldrb	r3, [r7, #14]
 8005ab8:	2b80      	cmp	r3, #128	; 0x80
 8005aba:	d004      	beq.n	8005ac6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005abc:	6839      	ldr	r1, [r7, #0]
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fbed 	bl	800629e <USBD_CtlError>
                break;
 8005ac4:	e091      	b.n	8005bea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ac6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	da0b      	bge.n	8005ae6 <USBD_StdEPReq+0x212>
 8005ace:	7bbb      	ldrb	r3, [r7, #14]
 8005ad0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	3310      	adds	r3, #16
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	e00b      	b.n	8005afe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	4413      	add	r3, r2
 8005afc:	3304      	adds	r3, #4
 8005afe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fc37 	bl	8006380 <USBD_CtlSendData>
              break;
 8005b12:	e06a      	b.n	8005bea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	da11      	bge.n	8005b40 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b1c:	7bbb      	ldrb	r3, [r7, #14]
 8005b1e:	f003 020f 	and.w	r2, r3, #15
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	440b      	add	r3, r1
 8005b2e:	3324      	adds	r3, #36	; 0x24
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d117      	bne.n	8005b66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fbb0 	bl	800629e <USBD_CtlError>
                  break;
 8005b3e:	e054      	b.n	8005bea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b40:	7bbb      	ldrb	r3, [r7, #14]
 8005b42:	f003 020f 	and.w	r2, r3, #15
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	440b      	add	r3, r1
 8005b52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d104      	bne.n	8005b66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fb9d 	bl	800629e <USBD_CtlError>
                  break;
 8005b64:	e041      	b.n	8005bea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	da0b      	bge.n	8005b86 <USBD_StdEPReq+0x2b2>
 8005b6e:	7bbb      	ldrb	r3, [r7, #14]
 8005b70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b74:	4613      	mov	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	3310      	adds	r3, #16
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	4413      	add	r3, r2
 8005b82:	3304      	adds	r3, #4
 8005b84:	e00b      	b.n	8005b9e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b86:	7bbb      	ldrb	r3, [r7, #14]
 8005b88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005ba0:	7bbb      	ldrb	r3, [r7, #14]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d002      	beq.n	8005bac <USBD_StdEPReq+0x2d8>
 8005ba6:	7bbb      	ldrb	r3, [r7, #14]
 8005ba8:	2b80      	cmp	r3, #128	; 0x80
 8005baa:	d103      	bne.n	8005bb4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	e00e      	b.n	8005bd2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005bb4:	7bbb      	ldrb	r3, [r7, #14]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f001 f897 	bl	8006cec <USBD_LL_IsStallEP>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	e002      	b.n	8005bd2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fbd1 	bl	8006380 <USBD_CtlSendData>
              break;
 8005bde:	e004      	b.n	8005bea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fb5b 	bl	800629e <USBD_CtlError>
              break;
 8005be8:	bf00      	nop
          }
          break;
 8005bea:	e004      	b.n	8005bf6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 fb55 	bl	800629e <USBD_CtlError>
          break;
 8005bf4:	bf00      	nop
      }
      break;
 8005bf6:	e005      	b.n	8005c04 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fb4f 	bl	800629e <USBD_CtlError>
      break;
 8005c00:	e000      	b.n	8005c04 <USBD_StdEPReq+0x330>
      break;
 8005c02:	bf00      	nop
  }

  return ret;
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	885b      	ldrh	r3, [r3, #2]
 8005c2a:	0a1b      	lsrs	r3, r3, #8
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	2b06      	cmp	r3, #6
 8005c32:	f200 8128 	bhi.w	8005e86 <USBD_GetDescriptor+0x276>
 8005c36:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <USBD_GetDescriptor+0x2c>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c59 	.word	0x08005c59
 8005c40:	08005c71 	.word	0x08005c71
 8005c44:	08005cb1 	.word	0x08005cb1
 8005c48:	08005e87 	.word	0x08005e87
 8005c4c:	08005e87 	.word	0x08005e87
 8005c50:	08005e27 	.word	0x08005e27
 8005c54:	08005e53 	.word	0x08005e53
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	7c12      	ldrb	r2, [r2, #16]
 8005c64:	f107 0108 	add.w	r1, r7, #8
 8005c68:	4610      	mov	r0, r2
 8005c6a:	4798      	blx	r3
 8005c6c:	60f8      	str	r0, [r7, #12]
      break;
 8005c6e:	e112      	b.n	8005e96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	7c1b      	ldrb	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10d      	bne.n	8005c94 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	f107 0208 	add.w	r2, r7, #8
 8005c84:	4610      	mov	r0, r2
 8005c86:	4798      	blx	r3
 8005c88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	2202      	movs	r2, #2
 8005c90:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005c92:	e100      	b.n	8005e96 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	f107 0208 	add.w	r2, r7, #8
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	4798      	blx	r3
 8005ca4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	2202      	movs	r2, #2
 8005cac:	701a      	strb	r2, [r3, #0]
      break;
 8005cae:	e0f2      	b.n	8005e96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	885b      	ldrh	r3, [r3, #2]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b05      	cmp	r3, #5
 8005cb8:	f200 80ac 	bhi.w	8005e14 <USBD_GetDescriptor+0x204>
 8005cbc:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <USBD_GetDescriptor+0xb4>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005cdd 	.word	0x08005cdd
 8005cc8:	08005d11 	.word	0x08005d11
 8005ccc:	08005d45 	.word	0x08005d45
 8005cd0:	08005d79 	.word	0x08005d79
 8005cd4:	08005dad 	.word	0x08005dad
 8005cd8:	08005de1 	.word	0x08005de1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00b      	beq.n	8005d00 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	7c12      	ldrb	r2, [r2, #16]
 8005cf4:	f107 0108 	add.w	r1, r7, #8
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	4798      	blx	r3
 8005cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cfe:	e091      	b.n	8005e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d00:	6839      	ldr	r1, [r7, #0]
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 facb 	bl	800629e <USBD_CtlError>
            err++;
 8005d08:	7afb      	ldrb	r3, [r7, #11]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d0e:	e089      	b.n	8005e24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	7c12      	ldrb	r2, [r2, #16]
 8005d28:	f107 0108 	add.w	r1, r7, #8
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	4798      	blx	r3
 8005d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d32:	e077      	b.n	8005e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fab1 	bl	800629e <USBD_CtlError>
            err++;
 8005d3c:	7afb      	ldrb	r3, [r7, #11]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	72fb      	strb	r3, [r7, #11]
          break;
 8005d42:	e06f      	b.n	8005e24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00b      	beq.n	8005d68 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	7c12      	ldrb	r2, [r2, #16]
 8005d5c:	f107 0108 	add.w	r1, r7, #8
 8005d60:	4610      	mov	r0, r2
 8005d62:	4798      	blx	r3
 8005d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d66:	e05d      	b.n	8005e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fa97 	bl	800629e <USBD_CtlError>
            err++;
 8005d70:	7afb      	ldrb	r3, [r7, #11]
 8005d72:	3301      	adds	r3, #1
 8005d74:	72fb      	strb	r3, [r7, #11]
          break;
 8005d76:	e055      	b.n	8005e24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00b      	beq.n	8005d9c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	7c12      	ldrb	r2, [r2, #16]
 8005d90:	f107 0108 	add.w	r1, r7, #8
 8005d94:	4610      	mov	r0, r2
 8005d96:	4798      	blx	r3
 8005d98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d9a:	e043      	b.n	8005e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fa7d 	bl	800629e <USBD_CtlError>
            err++;
 8005da4:	7afb      	ldrb	r3, [r7, #11]
 8005da6:	3301      	adds	r3, #1
 8005da8:	72fb      	strb	r3, [r7, #11]
          break;
 8005daa:	e03b      	b.n	8005e24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00b      	beq.n	8005dd0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	7c12      	ldrb	r2, [r2, #16]
 8005dc4:	f107 0108 	add.w	r1, r7, #8
 8005dc8:	4610      	mov	r0, r2
 8005dca:	4798      	blx	r3
 8005dcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dce:	e029      	b.n	8005e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fa63 	bl	800629e <USBD_CtlError>
            err++;
 8005dd8:	7afb      	ldrb	r3, [r7, #11]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	72fb      	strb	r3, [r7, #11]
          break;
 8005dde:	e021      	b.n	8005e24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	7c12      	ldrb	r2, [r2, #16]
 8005df8:	f107 0108 	add.w	r1, r7, #8
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4798      	blx	r3
 8005e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e02:	e00f      	b.n	8005e24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa49 	bl	800629e <USBD_CtlError>
            err++;
 8005e0c:	7afb      	ldrb	r3, [r7, #11]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	72fb      	strb	r3, [r7, #11]
          break;
 8005e12:	e007      	b.n	8005e24 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fa41 	bl	800629e <USBD_CtlError>
          err++;
 8005e1c:	7afb      	ldrb	r3, [r7, #11]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005e22:	bf00      	nop
      }
      break;
 8005e24:	e037      	b.n	8005e96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	7c1b      	ldrb	r3, [r3, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d109      	bne.n	8005e42 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e36:	f107 0208 	add.w	r2, r7, #8
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	4798      	blx	r3
 8005e3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e40:	e029      	b.n	8005e96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fa2a 	bl	800629e <USBD_CtlError>
        err++;
 8005e4a:	7afb      	ldrb	r3, [r7, #11]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	72fb      	strb	r3, [r7, #11]
      break;
 8005e50:	e021      	b.n	8005e96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	7c1b      	ldrb	r3, [r3, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10d      	bne.n	8005e76 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e62:	f107 0208 	add.w	r2, r7, #8
 8005e66:	4610      	mov	r0, r2
 8005e68:	4798      	blx	r3
 8005e6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	2207      	movs	r2, #7
 8005e72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e74:	e00f      	b.n	8005e96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fa10 	bl	800629e <USBD_CtlError>
        err++;
 8005e7e:	7afb      	ldrb	r3, [r7, #11]
 8005e80:	3301      	adds	r3, #1
 8005e82:	72fb      	strb	r3, [r7, #11]
      break;
 8005e84:	e007      	b.n	8005e96 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005e86:	6839      	ldr	r1, [r7, #0]
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fa08 	bl	800629e <USBD_CtlError>
      err++;
 8005e8e:	7afb      	ldrb	r3, [r7, #11]
 8005e90:	3301      	adds	r3, #1
 8005e92:	72fb      	strb	r3, [r7, #11]
      break;
 8005e94:	bf00      	nop
  }

  if (err != 0U)
 8005e96:	7afb      	ldrb	r3, [r7, #11]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d11e      	bne.n	8005eda <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	88db      	ldrh	r3, [r3, #6]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d016      	beq.n	8005ed2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005ea4:	893b      	ldrh	r3, [r7, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00e      	beq.n	8005ec8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	88da      	ldrh	r2, [r3, #6]
 8005eae:	893b      	ldrh	r3, [r7, #8]
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	bf28      	it	cs
 8005eb4:	4613      	movcs	r3, r2
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005eba:	893b      	ldrh	r3, [r7, #8]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	68f9      	ldr	r1, [r7, #12]
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fa5d 	bl	8006380 <USBD_CtlSendData>
 8005ec6:	e009      	b.n	8005edc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f9e7 	bl	800629e <USBD_CtlError>
 8005ed0:	e004      	b.n	8005edc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 faae 	bl	8006434 <USBD_CtlSendStatus>
 8005ed8:	e000      	b.n	8005edc <USBD_GetDescriptor+0x2cc>
    return;
 8005eda:	bf00      	nop
  }
}
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop

08005ee4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	889b      	ldrh	r3, [r3, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d131      	bne.n	8005f5a <USBD_SetAddress+0x76>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	88db      	ldrh	r3, [r3, #6]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d12d      	bne.n	8005f5a <USBD_SetAddress+0x76>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	885b      	ldrh	r3, [r3, #2]
 8005f02:	2b7f      	cmp	r3, #127	; 0x7f
 8005f04:	d829      	bhi.n	8005f5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	885b      	ldrh	r3, [r3, #2]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d104      	bne.n	8005f28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005f1e:	6839      	ldr	r1, [r7, #0]
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f9bc 	bl	800629e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f26:	e01d      	b.n	8005f64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	7bfa      	ldrb	r2, [r7, #15]
 8005f2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 ff05 	bl	8006d44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fa7a 	bl	8006434 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2202      	movs	r2, #2
 8005f4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f4e:	e009      	b.n	8005f64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f58:	e004      	b.n	8005f64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f5a:	6839      	ldr	r1, [r7, #0]
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f99e 	bl	800629e <USBD_CtlError>
  }
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	885b      	ldrh	r3, [r3, #2]
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	4b4e      	ldr	r3, [pc, #312]	; (80060bc <USBD_SetConfig+0x150>)
 8005f82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f84:	4b4d      	ldr	r3, [pc, #308]	; (80060bc <USBD_SetConfig+0x150>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d905      	bls.n	8005f98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f985 	bl	800629e <USBD_CtlError>
    return USBD_FAIL;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e08c      	b.n	80060b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d002      	beq.n	8005faa <USBD_SetConfig+0x3e>
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d029      	beq.n	8005ffc <USBD_SetConfig+0x90>
 8005fa8:	e075      	b.n	8006096 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005faa:	4b44      	ldr	r3, [pc, #272]	; (80060bc <USBD_SetConfig+0x150>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d020      	beq.n	8005ff4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005fb2:	4b42      	ldr	r3, [pc, #264]	; (80060bc <USBD_SetConfig+0x150>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005fbc:	4b3f      	ldr	r3, [pc, #252]	; (80060bc <USBD_SetConfig+0x150>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7fe ffe7 	bl	8004f96 <USBD_SetClassConfig>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d008      	beq.n	8005fe4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f962 	bl	800629e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2202      	movs	r2, #2
 8005fde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005fe2:	e065      	b.n	80060b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fa25 	bl	8006434 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2203      	movs	r2, #3
 8005fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005ff2:	e05d      	b.n	80060b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fa1d 	bl	8006434 <USBD_CtlSendStatus>
      break;
 8005ffa:	e059      	b.n	80060b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005ffc:	4b2f      	ldr	r3, [pc, #188]	; (80060bc <USBD_SetConfig+0x150>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d112      	bne.n	800602a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800600c:	4b2b      	ldr	r3, [pc, #172]	; (80060bc <USBD_SetConfig+0x150>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006016:	4b29      	ldr	r3, [pc, #164]	; (80060bc <USBD_SetConfig+0x150>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	4619      	mov	r1, r3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7fe ffd6 	bl	8004fce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa06 	bl	8006434 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006028:	e042      	b.n	80060b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800602a:	4b24      	ldr	r3, [pc, #144]	; (80060bc <USBD_SetConfig+0x150>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	429a      	cmp	r2, r3
 8006036:	d02a      	beq.n	800608e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7fe ffc4 	bl	8004fce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006046:	4b1d      	ldr	r3, [pc, #116]	; (80060bc <USBD_SetConfig+0x150>)
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006050:	4b1a      	ldr	r3, [pc, #104]	; (80060bc <USBD_SetConfig+0x150>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fe ff9d 	bl	8004f96 <USBD_SetClassConfig>
 800605c:	4603      	mov	r3, r0
 800605e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00f      	beq.n	8006086 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f918 	bl	800629e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fe ffa9 	bl	8004fce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006084:	e014      	b.n	80060b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f9d4 	bl	8006434 <USBD_CtlSendStatus>
      break;
 800608c:	e010      	b.n	80060b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f9d0 	bl	8006434 <USBD_CtlSendStatus>
      break;
 8006094:	e00c      	b.n	80060b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f900 	bl	800629e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800609e:	4b07      	ldr	r3, [pc, #28]	; (80060bc <USBD_SetConfig+0x150>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7fe ff92 	bl	8004fce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80060aa:	2303      	movs	r3, #3
 80060ac:	73fb      	strb	r3, [r7, #15]
      break;
 80060ae:	bf00      	nop
  }

  return ret;
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	2000011c 	.word	0x2000011c

080060c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	88db      	ldrh	r3, [r3, #6]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d004      	beq.n	80060dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80060d2:	6839      	ldr	r1, [r7, #0]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f8e2 	bl	800629e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80060da:	e023      	b.n	8006124 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	dc02      	bgt.n	80060ee <USBD_GetConfig+0x2e>
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	dc03      	bgt.n	80060f4 <USBD_GetConfig+0x34>
 80060ec:	e015      	b.n	800611a <USBD_GetConfig+0x5a>
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	d00b      	beq.n	800610a <USBD_GetConfig+0x4a>
 80060f2:	e012      	b.n	800611a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	3308      	adds	r3, #8
 80060fe:	2201      	movs	r2, #1
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f93c 	bl	8006380 <USBD_CtlSendData>
        break;
 8006108:	e00c      	b.n	8006124 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3304      	adds	r3, #4
 800610e:	2201      	movs	r2, #1
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f934 	bl	8006380 <USBD_CtlSendData>
        break;
 8006118:	e004      	b.n	8006124 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800611a:	6839      	ldr	r1, [r7, #0]
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f8be 	bl	800629e <USBD_CtlError>
        break;
 8006122:	bf00      	nop
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800613c:	b2db      	uxtb	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	2b02      	cmp	r3, #2
 8006142:	d81e      	bhi.n	8006182 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	88db      	ldrh	r3, [r3, #6]
 8006148:	2b02      	cmp	r3, #2
 800614a:	d004      	beq.n	8006156 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f8a5 	bl	800629e <USBD_CtlError>
        break;
 8006154:	e01a      	b.n	800618c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006162:	2b00      	cmp	r3, #0
 8006164:	d005      	beq.n	8006172 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f043 0202 	orr.w	r2, r3, #2
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	330c      	adds	r3, #12
 8006176:	2202      	movs	r2, #2
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f900 	bl	8006380 <USBD_CtlSendData>
      break;
 8006180:	e004      	b.n	800618c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006182:	6839      	ldr	r1, [r7, #0]
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f88a 	bl	800629e <USBD_CtlError>
      break;
 800618a:	bf00      	nop
  }
}
 800618c:	bf00      	nop
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	885b      	ldrh	r3, [r3, #2]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d107      	bne.n	80061b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f940 	bl	8006434 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80061b4:	e013      	b.n	80061de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	885b      	ldrh	r3, [r3, #2]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d10b      	bne.n	80061d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	889b      	ldrh	r3, [r3, #4]
 80061c2:	0a1b      	lsrs	r3, r3, #8
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f930 	bl	8006434 <USBD_CtlSendStatus>
}
 80061d4:	e003      	b.n	80061de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80061d6:	6839      	ldr	r1, [r7, #0]
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f860 	bl	800629e <USBD_CtlError>
}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b082      	sub	sp, #8
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	3b01      	subs	r3, #1
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d80b      	bhi.n	8006216 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	885b      	ldrh	r3, [r3, #2]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d10c      	bne.n	8006220 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f910 	bl	8006434 <USBD_CtlSendStatus>
      }
      break;
 8006214:	e004      	b.n	8006220 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f840 	bl	800629e <USBD_CtlError>
      break;
 800621e:	e000      	b.n	8006222 <USBD_ClrFeature+0x3c>
      break;
 8006220:	bf00      	nop
  }
}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	781a      	ldrb	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3301      	adds	r3, #1
 8006244:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	781a      	ldrb	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3301      	adds	r3, #1
 8006252:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7ff fa41 	bl	80056dc <SWAPBYTE>
 800625a:	4603      	mov	r3, r0
 800625c:	461a      	mov	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3301      	adds	r3, #1
 8006266:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	3301      	adds	r3, #1
 800626c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f7ff fa34 	bl	80056dc <SWAPBYTE>
 8006274:	4603      	mov	r3, r0
 8006276:	461a      	mov	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3301      	adds	r3, #1
 8006280:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3301      	adds	r3, #1
 8006286:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f7ff fa27 	bl	80056dc <SWAPBYTE>
 800628e:	4603      	mov	r3, r0
 8006290:	461a      	mov	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	80da      	strh	r2, [r3, #6]
}
 8006296:	bf00      	nop
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b082      	sub	sp, #8
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80062a8:	2180      	movs	r1, #128	; 0x80
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fce0 	bl	8006c70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80062b0:	2100      	movs	r1, #0
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fcdc 	bl	8006c70 <USBD_LL_StallEP>
}
 80062b8:	bf00      	nop
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d036      	beq.n	8006344 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80062da:	6938      	ldr	r0, [r7, #16]
 80062dc:	f000 f836 	bl	800634c <USBD_GetLen>
 80062e0:	4603      	mov	r3, r0
 80062e2:	3301      	adds	r3, #1
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80062ee:	7dfb      	ldrb	r3, [r7, #23]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	4413      	add	r3, r2
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	7812      	ldrb	r2, [r2, #0]
 80062f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
 80062fc:	3301      	adds	r3, #1
 80062fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006300:	7dfb      	ldrb	r3, [r7, #23]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	4413      	add	r3, r2
 8006306:	2203      	movs	r2, #3
 8006308:	701a      	strb	r2, [r3, #0]
  idx++;
 800630a:	7dfb      	ldrb	r3, [r7, #23]
 800630c:	3301      	adds	r3, #1
 800630e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006310:	e013      	b.n	800633a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	4413      	add	r3, r2
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	7812      	ldrb	r2, [r2, #0]
 800631c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	3301      	adds	r3, #1
 8006322:	613b      	str	r3, [r7, #16]
    idx++;
 8006324:	7dfb      	ldrb	r3, [r7, #23]
 8006326:	3301      	adds	r3, #1
 8006328:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800632a:	7dfb      	ldrb	r3, [r7, #23]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	4413      	add	r3, r2
 8006330:	2200      	movs	r2, #0
 8006332:	701a      	strb	r2, [r3, #0]
    idx++;
 8006334:	7dfb      	ldrb	r3, [r7, #23]
 8006336:	3301      	adds	r3, #1
 8006338:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1e7      	bne.n	8006312 <USBD_GetString+0x52>
 8006342:	e000      	b.n	8006346 <USBD_GetString+0x86>
    return;
 8006344:	bf00      	nop
  }
}
 8006346:	3718      	adds	r7, #24
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800635c:	e005      	b.n	800636a <USBD_GetLen+0x1e>
  {
    len++;
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	3301      	adds	r3, #1
 8006362:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	3301      	adds	r3, #1
 8006368:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1f5      	bne.n	800635e <USBD_GetLen+0x12>
  }

  return len;
 8006372:	7bfb      	ldrb	r3, [r7, #15]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2202      	movs	r2, #2
 8006390:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	2100      	movs	r1, #0
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 fceb 	bl	8006d82 <USBD_LL_Transmit>

  return USBD_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	2100      	movs	r1, #0
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 fcda 	bl	8006d82 <USBD_LL_Transmit>

  return USBD_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2203      	movs	r2, #3
 80063e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	2100      	movs	r1, #0
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 fcde 	bl	8006dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	2100      	movs	r1, #0
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fccd 	bl	8006dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2204      	movs	r2, #4
 8006440:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006444:	2300      	movs	r3, #0
 8006446:	2200      	movs	r2, #0
 8006448:	2100      	movs	r1, #0
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fc99 	bl	8006d82 <USBD_LL_Transmit>

  return USBD_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b082      	sub	sp, #8
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2205      	movs	r2, #5
 8006466:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800646a:	2300      	movs	r3, #0
 800646c:	2200      	movs	r2, #0
 800646e:	2100      	movs	r1, #0
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fca7 	bl	8006dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006484:	2200      	movs	r2, #0
 8006486:	4912      	ldr	r1, [pc, #72]	; (80064d0 <MX_USB_DEVICE_Init+0x50>)
 8006488:	4812      	ldr	r0, [pc, #72]	; (80064d4 <MX_USB_DEVICE_Init+0x54>)
 800648a:	f7fe fd07 	bl	8004e9c <USBD_Init>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006494:	f7fa f8f6 	bl	8000684 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006498:	490f      	ldr	r1, [pc, #60]	; (80064d8 <MX_USB_DEVICE_Init+0x58>)
 800649a:	480e      	ldr	r0, [pc, #56]	; (80064d4 <MX_USB_DEVICE_Init+0x54>)
 800649c:	f7fe fd2e 	bl	8004efc <USBD_RegisterClass>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80064a6:	f7fa f8ed 	bl	8000684 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80064aa:	490c      	ldr	r1, [pc, #48]	; (80064dc <MX_USB_DEVICE_Init+0x5c>)
 80064ac:	4809      	ldr	r0, [pc, #36]	; (80064d4 <MX_USB_DEVICE_Init+0x54>)
 80064ae:	f7fe fc1f 	bl	8004cf0 <USBD_CDC_RegisterInterface>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80064b8:	f7fa f8e4 	bl	8000684 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80064bc:	4805      	ldr	r0, [pc, #20]	; (80064d4 <MX_USB_DEVICE_Init+0x54>)
 80064be:	f7fe fd53 	bl	8004f68 <USBD_Start>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80064c8:	f7fa f8dc 	bl	8000684 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80064cc:	bf00      	nop
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	200000ac 	.word	0x200000ac
 80064d4:	20000120 	.word	0x20000120
 80064d8:	20000018 	.word	0x20000018
 80064dc:	20000098 	.word	0x20000098

080064e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80064e4:	2200      	movs	r2, #0
 80064e6:	4905      	ldr	r1, [pc, #20]	; (80064fc <CDC_Init_FS+0x1c>)
 80064e8:	4805      	ldr	r0, [pc, #20]	; (8006500 <CDC_Init_FS+0x20>)
 80064ea:	f7fe fc1b 	bl	8004d24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80064ee:	4905      	ldr	r1, [pc, #20]	; (8006504 <CDC_Init_FS+0x24>)
 80064f0:	4803      	ldr	r0, [pc, #12]	; (8006500 <CDC_Init_FS+0x20>)
 80064f2:	f7fe fc39 	bl	8004d68 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80064f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	20000bfc 	.word	0x20000bfc
 8006500:	20000120 	.word	0x20000120
 8006504:	200003fc 	.word	0x200003fc

08006508 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800650c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800650e:	4618      	mov	r0, r3
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	4603      	mov	r3, r0
 8006520:	6039      	str	r1, [r7, #0]
 8006522:	71fb      	strb	r3, [r7, #7]
 8006524:	4613      	mov	r3, r2
 8006526:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	2b23      	cmp	r3, #35	; 0x23
 800652c:	d84a      	bhi.n	80065c4 <CDC_Control_FS+0xac>
 800652e:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <CDC_Control_FS+0x1c>)
 8006530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006534:	080065c5 	.word	0x080065c5
 8006538:	080065c5 	.word	0x080065c5
 800653c:	080065c5 	.word	0x080065c5
 8006540:	080065c5 	.word	0x080065c5
 8006544:	080065c5 	.word	0x080065c5
 8006548:	080065c5 	.word	0x080065c5
 800654c:	080065c5 	.word	0x080065c5
 8006550:	080065c5 	.word	0x080065c5
 8006554:	080065c5 	.word	0x080065c5
 8006558:	080065c5 	.word	0x080065c5
 800655c:	080065c5 	.word	0x080065c5
 8006560:	080065c5 	.word	0x080065c5
 8006564:	080065c5 	.word	0x080065c5
 8006568:	080065c5 	.word	0x080065c5
 800656c:	080065c5 	.word	0x080065c5
 8006570:	080065c5 	.word	0x080065c5
 8006574:	080065c5 	.word	0x080065c5
 8006578:	080065c5 	.word	0x080065c5
 800657c:	080065c5 	.word	0x080065c5
 8006580:	080065c5 	.word	0x080065c5
 8006584:	080065c5 	.word	0x080065c5
 8006588:	080065c5 	.word	0x080065c5
 800658c:	080065c5 	.word	0x080065c5
 8006590:	080065c5 	.word	0x080065c5
 8006594:	080065c5 	.word	0x080065c5
 8006598:	080065c5 	.word	0x080065c5
 800659c:	080065c5 	.word	0x080065c5
 80065a0:	080065c5 	.word	0x080065c5
 80065a4:	080065c5 	.word	0x080065c5
 80065a8:	080065c5 	.word	0x080065c5
 80065ac:	080065c5 	.word	0x080065c5
 80065b0:	080065c5 	.word	0x080065c5
 80065b4:	080065c5 	.word	0x080065c5
 80065b8:	080065c5 	.word	0x080065c5
 80065bc:	080065c5 	.word	0x080065c5
 80065c0:	080065c5 	.word	0x080065c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80065c4:	bf00      	nop
  }

  return (USBD_OK);
 80065c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4805      	ldr	r0, [pc, #20]	; (80065f8 <CDC_Receive_FS+0x24>)
 80065e2:	f7fe fbc1 	bl	8004d68 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80065e6:	4804      	ldr	r0, [pc, #16]	; (80065f8 <CDC_Receive_FS+0x24>)
 80065e8:	f7fe fc22 	bl	8004e30 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80065ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000120 	.word	0x20000120

080065fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800660c:	4b0d      	ldr	r3, [pc, #52]	; (8006644 <CDC_Transmit_FS+0x48>)
 800660e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006612:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800661e:	2301      	movs	r3, #1
 8006620:	e00b      	b.n	800663a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006622:	887b      	ldrh	r3, [r7, #2]
 8006624:	461a      	mov	r2, r3
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	4806      	ldr	r0, [pc, #24]	; (8006644 <CDC_Transmit_FS+0x48>)
 800662a:	f7fe fb7b 	bl	8004d24 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800662e:	4805      	ldr	r0, [pc, #20]	; (8006644 <CDC_Transmit_FS+0x48>)
 8006630:	f7fe fbb8 	bl	8004da4 <USBD_CDC_TransmitPacket>
 8006634:	4603      	mov	r3, r0
 8006636:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006638:	7bfb      	ldrb	r3, [r7, #15]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20000120 	.word	0x20000120

08006648 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800665a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800665e:	4618      	mov	r0, r3
 8006660:	371c      	adds	r7, #28
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
	...

0800666c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	4603      	mov	r3, r0
 8006674:	6039      	str	r1, [r7, #0]
 8006676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2212      	movs	r2, #18
 800667c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800667e:	4b03      	ldr	r3, [pc, #12]	; (800668c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	200000c8 	.word	0x200000c8

08006690 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	4603      	mov	r3, r0
 8006698:	6039      	str	r1, [r7, #0]
 800669a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2204      	movs	r2, #4
 80066a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80066a2:	4b03      	ldr	r3, [pc, #12]	; (80066b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	200000dc 	.word	0x200000dc

080066b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	6039      	str	r1, [r7, #0]
 80066be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d105      	bne.n	80066d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	4907      	ldr	r1, [pc, #28]	; (80066e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80066ca:	4808      	ldr	r0, [pc, #32]	; (80066ec <USBD_FS_ProductStrDescriptor+0x38>)
 80066cc:	f7ff fdf8 	bl	80062c0 <USBD_GetString>
 80066d0:	e004      	b.n	80066dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	4904      	ldr	r1, [pc, #16]	; (80066e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80066d6:	4805      	ldr	r0, [pc, #20]	; (80066ec <USBD_FS_ProductStrDescriptor+0x38>)
 80066d8:	f7ff fdf2 	bl	80062c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066dc:	4b02      	ldr	r3, [pc, #8]	; (80066e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	200013fc 	.word	0x200013fc
 80066ec:	08006f34 	.word	0x08006f34

080066f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	6039      	str	r1, [r7, #0]
 80066fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	4904      	ldr	r1, [pc, #16]	; (8006710 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006700:	4804      	ldr	r0, [pc, #16]	; (8006714 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006702:	f7ff fddd 	bl	80062c0 <USBD_GetString>
  return USBD_StrDesc;
 8006706:	4b02      	ldr	r3, [pc, #8]	; (8006710 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	200013fc 	.word	0x200013fc
 8006714:	08006f4c 	.word	0x08006f4c

08006718 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	6039      	str	r1, [r7, #0]
 8006722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	221a      	movs	r2, #26
 8006728:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800672a:	f000 f843 	bl	80067b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800672e:	4b02      	ldr	r3, [pc, #8]	; (8006738 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006730:	4618      	mov	r0, r3
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	200000e0 	.word	0x200000e0

0800673c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	6039      	str	r1, [r7, #0]
 8006746:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d105      	bne.n	800675a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	4907      	ldr	r1, [pc, #28]	; (8006770 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006752:	4808      	ldr	r0, [pc, #32]	; (8006774 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006754:	f7ff fdb4 	bl	80062c0 <USBD_GetString>
 8006758:	e004      	b.n	8006764 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	4904      	ldr	r1, [pc, #16]	; (8006770 <USBD_FS_ConfigStrDescriptor+0x34>)
 800675e:	4805      	ldr	r0, [pc, #20]	; (8006774 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006760:	f7ff fdae 	bl	80062c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006764:	4b02      	ldr	r3, [pc, #8]	; (8006770 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006766:	4618      	mov	r0, r3
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	200013fc 	.word	0x200013fc
 8006774:	08006f60 	.word	0x08006f60

08006778 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	4603      	mov	r3, r0
 8006780:	6039      	str	r1, [r7, #0]
 8006782:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d105      	bne.n	8006796 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	4907      	ldr	r1, [pc, #28]	; (80067ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800678e:	4808      	ldr	r0, [pc, #32]	; (80067b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006790:	f7ff fd96 	bl	80062c0 <USBD_GetString>
 8006794:	e004      	b.n	80067a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	4904      	ldr	r1, [pc, #16]	; (80067ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800679a:	4805      	ldr	r0, [pc, #20]	; (80067b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800679c:	f7ff fd90 	bl	80062c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80067a0:	4b02      	ldr	r3, [pc, #8]	; (80067ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	200013fc 	.word	0x200013fc
 80067b0:	08006f6c 	.word	0x08006f6c

080067b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80067ba:	4b0f      	ldr	r3, [pc, #60]	; (80067f8 <Get_SerialNum+0x44>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80067c0:	4b0e      	ldr	r3, [pc, #56]	; (80067fc <Get_SerialNum+0x48>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80067c6:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <Get_SerialNum+0x4c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4413      	add	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d009      	beq.n	80067ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80067da:	2208      	movs	r2, #8
 80067dc:	4909      	ldr	r1, [pc, #36]	; (8006804 <Get_SerialNum+0x50>)
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 f814 	bl	800680c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80067e4:	2204      	movs	r2, #4
 80067e6:	4908      	ldr	r1, [pc, #32]	; (8006808 <Get_SerialNum+0x54>)
 80067e8:	68b8      	ldr	r0, [r7, #8]
 80067ea:	f000 f80f 	bl	800680c <IntToUnicode>
  }
}
 80067ee:	bf00      	nop
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	1fff7a10 	.word	0x1fff7a10
 80067fc:	1fff7a14 	.word	0x1fff7a14
 8006800:	1fff7a18 	.word	0x1fff7a18
 8006804:	200000e2 	.word	0x200000e2
 8006808:	200000f2 	.word	0x200000f2

0800680c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	4613      	mov	r3, r2
 8006818:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800681e:	2300      	movs	r3, #0
 8006820:	75fb      	strb	r3, [r7, #23]
 8006822:	e027      	b.n	8006874 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	0f1b      	lsrs	r3, r3, #28
 8006828:	2b09      	cmp	r3, #9
 800682a:	d80b      	bhi.n	8006844 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	0f1b      	lsrs	r3, r3, #28
 8006830:	b2da      	uxtb	r2, r3
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	4619      	mov	r1, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	440b      	add	r3, r1
 800683c:	3230      	adds	r2, #48	; 0x30
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	e00a      	b.n	800685a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	0f1b      	lsrs	r3, r3, #28
 8006848:	b2da      	uxtb	r2, r3
 800684a:	7dfb      	ldrb	r3, [r7, #23]
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	4619      	mov	r1, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	440b      	add	r3, r1
 8006854:	3237      	adds	r2, #55	; 0x37
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006860:	7dfb      	ldrb	r3, [r7, #23]
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	3301      	adds	r3, #1
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	4413      	add	r3, r2
 800686a:	2200      	movs	r2, #0
 800686c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	3301      	adds	r3, #1
 8006872:	75fb      	strb	r3, [r7, #23]
 8006874:	7dfa      	ldrb	r2, [r7, #23]
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	429a      	cmp	r2, r3
 800687a:	d3d3      	bcc.n	8006824 <IntToUnicode+0x18>
  }
}
 800687c:	bf00      	nop
 800687e:	bf00      	nop
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
	...

0800688c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08a      	sub	sp, #40	; 0x28
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006894:	f107 0314 	add.w	r3, r7, #20
 8006898:	2200      	movs	r2, #0
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	605a      	str	r2, [r3, #4]
 800689e:	609a      	str	r2, [r3, #8]
 80068a0:	60da      	str	r2, [r3, #12]
 80068a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068ac:	d13a      	bne.n	8006924 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068ae:	2300      	movs	r3, #0
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	4b1e      	ldr	r3, [pc, #120]	; (800692c <HAL_PCD_MspInit+0xa0>)
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	4a1d      	ldr	r2, [pc, #116]	; (800692c <HAL_PCD_MspInit+0xa0>)
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	6313      	str	r3, [r2, #48]	; 0x30
 80068be:	4b1b      	ldr	r3, [pc, #108]	; (800692c <HAL_PCD_MspInit+0xa0>)
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	613b      	str	r3, [r7, #16]
 80068c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80068ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80068ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068d0:	2302      	movs	r3, #2
 80068d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d4:	2300      	movs	r3, #0
 80068d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068d8:	2303      	movs	r3, #3
 80068da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80068dc:	230a      	movs	r3, #10
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068e0:	f107 0314 	add.w	r3, r7, #20
 80068e4:	4619      	mov	r1, r3
 80068e6:	4812      	ldr	r0, [pc, #72]	; (8006930 <HAL_PCD_MspInit+0xa4>)
 80068e8:	f7fa f912 	bl	8000b10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80068ec:	4b0f      	ldr	r3, [pc, #60]	; (800692c <HAL_PCD_MspInit+0xa0>)
 80068ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f0:	4a0e      	ldr	r2, [pc, #56]	; (800692c <HAL_PCD_MspInit+0xa0>)
 80068f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f6:	6353      	str	r3, [r2, #52]	; 0x34
 80068f8:	2300      	movs	r3, #0
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	4b0b      	ldr	r3, [pc, #44]	; (800692c <HAL_PCD_MspInit+0xa0>)
 80068fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006900:	4a0a      	ldr	r2, [pc, #40]	; (800692c <HAL_PCD_MspInit+0xa0>)
 8006902:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006906:	6453      	str	r3, [r2, #68]	; 0x44
 8006908:	4b08      	ldr	r3, [pc, #32]	; (800692c <HAL_PCD_MspInit+0xa0>)
 800690a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006914:	2200      	movs	r2, #0
 8006916:	2100      	movs	r1, #0
 8006918:	2043      	movs	r0, #67	; 0x43
 800691a:	f7fa f8c2 	bl	8000aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800691e:	2043      	movs	r0, #67	; 0x43
 8006920:	f7fa f8db 	bl	8000ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006924:	bf00      	nop
 8006926:	3728      	adds	r7, #40	; 0x28
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	40023800 	.word	0x40023800
 8006930:	40020000 	.word	0x40020000

08006934 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006948:	4619      	mov	r1, r3
 800694a:	4610      	mov	r0, r2
 800694c:	f7fe fb59 	bl	8005002 <USBD_LL_SetupStage>
}
 8006950:	bf00      	nop
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	460b      	mov	r3, r1
 8006962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800696a:	78fa      	ldrb	r2, [r7, #3]
 800696c:	6879      	ldr	r1, [r7, #4]
 800696e:	4613      	mov	r3, r2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	440b      	add	r3, r1
 8006978:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	78fb      	ldrb	r3, [r7, #3]
 8006980:	4619      	mov	r1, r3
 8006982:	f7fe fb93 	bl	80050ac <USBD_LL_DataOutStage>
}
 8006986:	bf00      	nop
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b082      	sub	sp, #8
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	460b      	mov	r3, r1
 8006998:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80069a0:	78fa      	ldrb	r2, [r7, #3]
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	4613      	mov	r3, r2
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	4413      	add	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	334c      	adds	r3, #76	; 0x4c
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	78fb      	ldrb	r3, [r7, #3]
 80069b4:	4619      	mov	r1, r3
 80069b6:	f7fe fc2c 	bl	8005212 <USBD_LL_DataInStage>
}
 80069ba:	bf00      	nop
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b082      	sub	sp, #8
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe fd60 	bl	8005496 <USBD_LL_SOF>
}
 80069d6:	bf00      	nop
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80069e6:	2301      	movs	r3, #1
 80069e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d102      	bne.n	80069f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80069f2:	2300      	movs	r3, #0
 80069f4:	73fb      	strb	r3, [r7, #15]
 80069f6:	e008      	b.n	8006a0a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d102      	bne.n	8006a06 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006a00:	2301      	movs	r3, #1
 8006a02:	73fb      	strb	r3, [r7, #15]
 8006a04:	e001      	b.n	8006a0a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006a06:	f7f9 fe3d 	bl	8000684 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a10:	7bfa      	ldrb	r2, [r7, #15]
 8006a12:	4611      	mov	r1, r2
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fe fd00 	bl	800541a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7fe fca8 	bl	8005376 <USBD_LL_Reset>
}
 8006a26:	bf00      	nop
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
	...

08006a30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fe fcfb 	bl	800543a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	6812      	ldr	r2, [r2, #0]
 8006a52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a56:	f043 0301 	orr.w	r3, r3, #1
 8006a5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a64:	4b04      	ldr	r3, [pc, #16]	; (8006a78 <HAL_PCD_SuspendCallback+0x48>)
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	4a03      	ldr	r2, [pc, #12]	; (8006a78 <HAL_PCD_SuspendCallback+0x48>)
 8006a6a:	f043 0306 	orr.w	r3, r3, #6
 8006a6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006a70:	bf00      	nop
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	e000ed00 	.word	0xe000ed00

08006a7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fe fceb 	bl	8005466 <USBD_LL_Resume>
}
 8006a90:	bf00      	nop
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006aaa:	78fa      	ldrb	r2, [r7, #3]
 8006aac:	4611      	mov	r1, r2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fe fd43 	bl	800553a <USBD_LL_IsoOUTIncomplete>
}
 8006ab4:	bf00      	nop
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ace:	78fa      	ldrb	r2, [r7, #3]
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fe fcff 	bl	80054d6 <USBD_LL_IsoINIncomplete>
}
 8006ad8:	bf00      	nop
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fe fd55 	bl	800559e <USBD_LL_DevConnected>
}
 8006af4:	bf00      	nop
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fe fd52 	bl	80055b4 <USBD_LL_DevDisconnected>
}
 8006b10:	bf00      	nop
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d13c      	bne.n	8006ba2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006b28:	4a20      	ldr	r2, [pc, #128]	; (8006bac <USBD_LL_Init+0x94>)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a1e      	ldr	r2, [pc, #120]	; (8006bac <USBD_LL_Init+0x94>)
 8006b34:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006b38:	4b1c      	ldr	r3, [pc, #112]	; (8006bac <USBD_LL_Init+0x94>)
 8006b3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006b3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006b40:	4b1a      	ldr	r3, [pc, #104]	; (8006bac <USBD_LL_Init+0x94>)
 8006b42:	2204      	movs	r2, #4
 8006b44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006b46:	4b19      	ldr	r3, [pc, #100]	; (8006bac <USBD_LL_Init+0x94>)
 8006b48:	2202      	movs	r2, #2
 8006b4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006b4c:	4b17      	ldr	r3, [pc, #92]	; (8006bac <USBD_LL_Init+0x94>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006b52:	4b16      	ldr	r3, [pc, #88]	; (8006bac <USBD_LL_Init+0x94>)
 8006b54:	2202      	movs	r2, #2
 8006b56:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006b58:	4b14      	ldr	r3, [pc, #80]	; (8006bac <USBD_LL_Init+0x94>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006b5e:	4b13      	ldr	r3, [pc, #76]	; (8006bac <USBD_LL_Init+0x94>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006b64:	4b11      	ldr	r3, [pc, #68]	; (8006bac <USBD_LL_Init+0x94>)
 8006b66:	2200      	movs	r2, #0
 8006b68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006b6a:	4b10      	ldr	r3, [pc, #64]	; (8006bac <USBD_LL_Init+0x94>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006b70:	4b0e      	ldr	r3, [pc, #56]	; (8006bac <USBD_LL_Init+0x94>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006b76:	480d      	ldr	r0, [pc, #52]	; (8006bac <USBD_LL_Init+0x94>)
 8006b78:	f7fa f97f 	bl	8000e7a <HAL_PCD_Init>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006b82:	f7f9 fd7f 	bl	8000684 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006b86:	2180      	movs	r1, #128	; 0x80
 8006b88:	4808      	ldr	r0, [pc, #32]	; (8006bac <USBD_LL_Init+0x94>)
 8006b8a:	f7fb fbd6 	bl	800233a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006b8e:	2240      	movs	r2, #64	; 0x40
 8006b90:	2100      	movs	r1, #0
 8006b92:	4806      	ldr	r0, [pc, #24]	; (8006bac <USBD_LL_Init+0x94>)
 8006b94:	f7fb fb8a 	bl	80022ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006b98:	2280      	movs	r2, #128	; 0x80
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	4803      	ldr	r0, [pc, #12]	; (8006bac <USBD_LL_Init+0x94>)
 8006b9e:	f7fb fb85 	bl	80022ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	200015fc 	.word	0x200015fc

08006bb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fa fa74 	bl	80010b4 <HAL_PCD_Start>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 f942 	bl	8006e5c <USBD_Get_USB_Status>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	4608      	mov	r0, r1
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	70fb      	strb	r3, [r7, #3]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	70bb      	strb	r3, [r7, #2]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006c0e:	78bb      	ldrb	r3, [r7, #2]
 8006c10:	883a      	ldrh	r2, [r7, #0]
 8006c12:	78f9      	ldrb	r1, [r7, #3]
 8006c14:	f7fa ff45 	bl	8001aa2 <HAL_PCD_EP_Open>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 f91c 	bl	8006e5c <USBD_Get_USB_Status>
 8006c24:	4603      	mov	r3, r0
 8006c26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c28:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c4c:	78fa      	ldrb	r2, [r7, #3]
 8006c4e:	4611      	mov	r1, r2
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fa ff8e 	bl	8001b72 <HAL_PCD_EP_Close>
 8006c56:	4603      	mov	r3, r0
 8006c58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 f8fd 	bl	8006e5c <USBD_Get_USB_Status>
 8006c62:	4603      	mov	r3, r0
 8006c64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c66:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c8a:	78fa      	ldrb	r2, [r7, #3]
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fb f866 	bl	8001d60 <HAL_PCD_EP_SetStall>
 8006c94:	4603      	mov	r3, r0
 8006c96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 f8de 	bl	8006e5c <USBD_Get_USB_Status>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006cc8:	78fa      	ldrb	r2, [r7, #3]
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fb f8ab 	bl	8001e28 <HAL_PCD_EP_ClrStall>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 f8bf 	bl	8006e5c <USBD_Get_USB_Status>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006cfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	da0b      	bge.n	8006d20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d0e:	68f9      	ldr	r1, [r7, #12]
 8006d10:	4613      	mov	r3, r2
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	440b      	add	r3, r1
 8006d1a:	333e      	adds	r3, #62	; 0x3e
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	e00b      	b.n	8006d38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d26:	68f9      	ldr	r1, [r7, #12]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	440b      	add	r3, r1
 8006d32:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006d36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d54:	2300      	movs	r3, #0
 8006d56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d5e:	78fa      	ldrb	r2, [r7, #3]
 8006d60:	4611      	mov	r1, r2
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fa fe78 	bl	8001a58 <HAL_PCD_SetAddress>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 f874 	bl	8006e5c <USBD_Get_USB_Status>
 8006d74:	4603      	mov	r3, r0
 8006d76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b086      	sub	sp, #24
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	607a      	str	r2, [r7, #4]
 8006d8c:	603b      	str	r3, [r7, #0]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006da0:	7af9      	ldrb	r1, [r7, #11]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	f7fa ff91 	bl	8001ccc <HAL_PCD_EP_Transmit>
 8006daa:	4603      	mov	r3, r0
 8006dac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dae:	7dfb      	ldrb	r3, [r7, #23]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f000 f853 	bl	8006e5c <USBD_Get_USB_Status>
 8006db6:	4603      	mov	r3, r0
 8006db8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006dba:	7dbb      	ldrb	r3, [r7, #22]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	607a      	str	r2, [r7, #4]
 8006dce:	603b      	str	r3, [r7, #0]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006de2:	7af9      	ldrb	r1, [r7, #11]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	f7fa ff0d 	bl	8001c06 <HAL_PCD_EP_Receive>
 8006dec:	4603      	mov	r3, r0
 8006dee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 f832 	bl	8006e5c <USBD_Get_USB_Status>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006dfc:	7dbb      	ldrb	r3, [r7, #22]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3718      	adds	r7, #24
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b082      	sub	sp, #8
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e18:	78fa      	ldrb	r2, [r7, #3]
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fa ff3d 	bl	8001c9c <HAL_PCD_EP_GetRxCount>
 8006e22:	4603      	mov	r3, r0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006e34:	4b03      	ldr	r3, [pc, #12]	; (8006e44 <USBD_static_malloc+0x18>)
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	20001b08 	.word	0x20001b08

08006e48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]

}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d817      	bhi.n	8006ea0 <USBD_Get_USB_Status+0x44>
 8006e70:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <USBD_Get_USB_Status+0x1c>)
 8006e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e76:	bf00      	nop
 8006e78:	08006e89 	.word	0x08006e89
 8006e7c:	08006e8f 	.word	0x08006e8f
 8006e80:	08006e95 	.word	0x08006e95
 8006e84:	08006e9b 	.word	0x08006e9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e8c:	e00b      	b.n	8006ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	73fb      	strb	r3, [r7, #15]
    break;
 8006e92:	e008      	b.n	8006ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e94:	2301      	movs	r3, #1
 8006e96:	73fb      	strb	r3, [r7, #15]
    break;
 8006e98:	e005      	b.n	8006ea6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8006e9e:	e002      	b.n	8006ea6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea4:	bf00      	nop
  }
  return usb_status;
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <__libc_init_array>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	4d0d      	ldr	r5, [pc, #52]	; (8006eec <__libc_init_array+0x38>)
 8006eb8:	4c0d      	ldr	r4, [pc, #52]	; (8006ef0 <__libc_init_array+0x3c>)
 8006eba:	1b64      	subs	r4, r4, r5
 8006ebc:	10a4      	asrs	r4, r4, #2
 8006ebe:	2600      	movs	r6, #0
 8006ec0:	42a6      	cmp	r6, r4
 8006ec2:	d109      	bne.n	8006ed8 <__libc_init_array+0x24>
 8006ec4:	4d0b      	ldr	r5, [pc, #44]	; (8006ef4 <__libc_init_array+0x40>)
 8006ec6:	4c0c      	ldr	r4, [pc, #48]	; (8006ef8 <__libc_init_array+0x44>)
 8006ec8:	f000 f820 	bl	8006f0c <_init>
 8006ecc:	1b64      	subs	r4, r4, r5
 8006ece:	10a4      	asrs	r4, r4, #2
 8006ed0:	2600      	movs	r6, #0
 8006ed2:	42a6      	cmp	r6, r4
 8006ed4:	d105      	bne.n	8006ee2 <__libc_init_array+0x2e>
 8006ed6:	bd70      	pop	{r4, r5, r6, pc}
 8006ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006edc:	4798      	blx	r3
 8006ede:	3601      	adds	r6, #1
 8006ee0:	e7ee      	b.n	8006ec0 <__libc_init_array+0xc>
 8006ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee6:	4798      	blx	r3
 8006ee8:	3601      	adds	r6, #1
 8006eea:	e7f2      	b.n	8006ed2 <__libc_init_array+0x1e>
 8006eec:	08006f94 	.word	0x08006f94
 8006ef0:	08006f94 	.word	0x08006f94
 8006ef4:	08006f94 	.word	0x08006f94
 8006ef8:	08006f98 	.word	0x08006f98

08006efc <memset>:
 8006efc:	4402      	add	r2, r0
 8006efe:	4603      	mov	r3, r0
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d100      	bne.n	8006f06 <memset+0xa>
 8006f04:	4770      	bx	lr
 8006f06:	f803 1b01 	strb.w	r1, [r3], #1
 8006f0a:	e7f9      	b.n	8006f00 <memset+0x4>

08006f0c <_init>:
 8006f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0e:	bf00      	nop
 8006f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f12:	bc08      	pop	{r3}
 8006f14:	469e      	mov	lr, r3
 8006f16:	4770      	bx	lr

08006f18 <_fini>:
 8006f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1a:	bf00      	nop
 8006f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1e:	bc08      	pop	{r3}
 8006f20:	469e      	mov	lr, r3
 8006f22:	4770      	bx	lr
